THEORY User_Pass IS
    
    
Operation(AssertionLemmas) & Pattern(rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & pp(rt.0);
Operation(AssertionLemmas) & Pattern(rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE) & ff(0) & pp(rt.0);
Operation(AssertionLemmas) & Pattern(rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE) & ff(0) & pp(rt.0);
Operation(Initialisation) & Pattern({1|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{2|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{3|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{4|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{5|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{6|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{7|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{8|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{9|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{10|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{11|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{12|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{13|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{14|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{15|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{16|->id_reg_8|->[1,1,1,1,1,1,1,1]}: (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & eh(id_reg_8,_h,Goal) & pr;
Operation(Initialisation) & Pattern(dom({1|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{2|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{3|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{4|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{5|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{6|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{7|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{8|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{9|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{10|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{11|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{12|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{13|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{14|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{15|->id_reg_8|->[1,1,1,1,1,1,1,1]}\/{16|->id_reg_8|->[1,1,1,1,1,1,1,1]}) = (1..16)*{id_reg_8}) & ff(0) & dd & eh(id_reg_8,_h,Goal) & pr;
Operation(AssertionLemmas) & Pattern(io_ports(rgs8(6|->id_reg_8)): BYTE) & ff(0) & ah(ran(bv16_ushort) = USHORT) & pr;
Operation(AssertionLemmas) & Pattern(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & pr(Tac(Update_flag));
Operation(AssertionLemmas) & Pattern(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & pr(Tac(Update_flag));
Operation(AssertionLemmas) & Pattern(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & pr(Tac(Update_flag));
Operation(AssertionLemmas) & Pattern(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & pr(Tac(Update_flag));
Operation(AssertionLemmas) & Pattern(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & pr(Tac(Update_flag));
Operation(OUTIR) & Pattern(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE) & ff(0) & dd & ss & pr;
Operation(OUTD) & Pattern(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE) & ff(0) & dd & ss & pr;
Operation(OUTDR) & Pattern(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE) & ff(0) & dd & ss & pr;
Operation(AssertionLemmas) & Pattern(ran(bv_9ireg_plus_d0) = BYTE) & ff(1) & eh(bv_9ireg_plus_d0,_h,Goal) & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(dom(rgs8<+xx) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(ext_update_io_ports) & Pattern(dom(io_ports<+{uchar_byte(address)|->schar_byte(value)}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(IN_A_9n0) & Pattern(dom(rgs8<+{1|->id_reg_8|->io_ports(uchar_byte(nn))}) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & ss & pr;
Operation(IN_r_9C0) & Pattern(dom(rgs8<+({rr|->io_ports(rgs8(6|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(INI) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(INIR) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(IND) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(INDR) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUT_9n0_A) & Pattern(dom(io_ports<+{uchar_byte(nn)|->rgs8(1|->id_reg_8)}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(OUT_9C0_r) & Pattern(dom(io_ports<+{rgs8(rr)|->rgs8(6|->id_reg_8)}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(OUTI) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTI) & Pattern(dom(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(OUTIR) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTIR) & Pattern(dom(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(OUTD) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTD) & Pattern(dom(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(OUTDR) & Pattern(dom(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)})) = (1..16)*{id_reg_8}) & ff(0) & dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTDR) & Pattern(dom(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}) = BYTE) & ff(0) & dd & ss & eh(dom(io_ports)) & ss & pr;
Operation(INIR) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(IND) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(INDR) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTI) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTI) & Pattern(io_ports<+{rgs8(6|->id_reg_8)|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))}: BYTE +-> BYTE) & ff(0) & dd & ah(rgs8(c0): BYTE & mem(byte_bv16(rgs8(h0),rgs8(l0))): BYTE) & ss & pr & ss & pr & pp(rt.0);
Operation(OUTIR) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTD) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(OUTDR) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & pr;
Operation(AssertionLemmas) & Pattern(update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & ff(0) & eh(update_flag_reg,_h,Goal) & dd & ss & ar(BIT_VECTOR.1,Once) & pr & pr & pr & pr & pr & pr & pr & pr;
Operation(INI) & Pattern(rgs8<+({13|->id_reg_8|->hvn}\/{14|->id_reg_8|->lvn}\/{5|->id_reg_8|->dec(rgs8(5|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(0) & dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,dec(rgs8(b0)),f0,[carry,add_sub,pv,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & ss & pr & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
Operation(IN_r_9C0) & Pattern(rgs8<+({rr|->io_ports(rgs8(6|->id_reg_8))}\/{update_flag_reg(negative,zero,half_carry,pv,add_sub,carry)}): (1..16)*{id_reg_8} +-> BYTE) & ff(1) & dd & eh(update_flag_reg,_h,Goal) & ss & ph(rr,io_ports(rgs8(c0)),f0,[carry,add_sub,pv,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & pr & pr & ss & pr & ar(BIT_VECTOR.1,Once) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & pr
END

/*THEORY User_Pass IS
Pattern(update_refresh_reg(r_): BYTE) & ff(0) & eh(update_refresh_reg,_h,Goal) & pr;
Pattern(ran(bv_9ireg_plus_d0) = BYTE) & ff(1) & eh(bv_9ireg_plus_d0,_h,Goal) & pr;
Pattern(ran(bv_ireg_plus_d) = BV16) & ff(0) & eh(bv_ireg_plus_d,_h,Goal) & eh(ushort_bv16,_h,Goal) & ah(ran(bv16_ushort) = USHORT) & pr & pr;
Pattern(dom({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}\/{3|->id_reg_8|->uchar_byte(255)}\/{4|->id_reg_8|->uchar_byte(255)}\/{5|->id_reg_8|->uchar_byte(255)}\/{6|->id_reg_8|->uchar_byte(255)}\/{7|->id_reg_8|->uchar_byte(255)}\/{8|->id_reg_8|->uchar_byte(255)}\/{9|->id_reg_8|->uchar_byte(255)}\/{10|->id_reg_8|->uchar_byte(255)}\/{11|->id_reg_8|->uchar_byte(255)}\/{12|->id_reg_8|->uchar_byte(255)}\/{13|->id_reg_8|->uchar_byte(255)}\/{14|->id_reg_8|->uchar_byte(255)}\/{15|->id_reg_8|->uchar_byte(255)}\/{16|->id_reg_8|->uchar_byte(255)}) = (1..16)*{id_reg_8}) & ff(0) & dd & ah(!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & dd & ph(255,!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & eh(id_reg_8,_h,Goal) & pr;
Pattern(instruction_next(pc): USHORT) & ff(1) & dd & ah(instruction_next: USHORT +-> USHORT & ran(instruction_next) = USHORT & pc: USHORT) & pr & pr & pr & pr;
Pattern({1|->id_reg_8|->uchar_byte(255)}\/{2|->id_reg_8|->uchar_byte(255)}\/{3|->id_reg_8|->uchar_byte(255)}\/{4|->id_reg_8|->uchar_byte(255)}\/{5|->id_reg_8|->uchar_byte(255)}\/{6|->id_reg_8|->uchar_byte(255)}\/{7|->id_reg_8|->uchar_byte(255)}\/{8|->id_reg_8|->uchar_byte(255)}\/{9|->id_reg_8|->uchar_byte(255)}\/{10|->id_reg_8|->uchar_byte(255)}\/{11|->id_reg_8|->uchar_byte(255)}\/{12|->id_reg_8|->uchar_byte(255)}\/{13|->id_reg_8|->uchar_byte(255)}\/{14|->id_reg_8|->uchar_byte(255)}\/{15|->id_reg_8|->uchar_byte(255)}\/{16|->id_reg_8|->uchar_byte(255)}: (1..16)*{id_reg_8} +-> BYTE) & ff(0) & ae(uchar_byte(255),aa) & dd & dd & ah(!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & dd & ph(255,!xx.(xx: UCHAR => uchar_byte(xx): BYTE)) & pr & eh(uchar_byte(255),_h,Goal) & eh(id_reg_8,_h,Goal) & mp & mp & ss & pr & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr
END
*/