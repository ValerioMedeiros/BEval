
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.7,(_f(436) => _f(437));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.6,(_f(434) => _f(435));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.5,(_f(432) => _f(433));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.4,(_f(430) => _f(431));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.3,(_f(428) => _f(429));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.2,(_f(426) => _f(427));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(423) & ext_RESETSubstitution.1,(_f(424) => _f(425));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & ext_INTPrecondition.2,(_f(420) => _f(421));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & ext_INTPrecondition.1,(_f(418) => _f(419));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.36,(_f(416) => _f(417));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.35,(_f(414) => _f(415));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.34,(_f(412) => _f(413));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.33,(_f(410) => _f(411));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.32,(_f(408) => _f(409));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.31,(_f(406) => _f(407));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.30,(_f(404) => _f(405));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.29,(_f(402) => _f(403));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.28,(_f(400) => _f(401));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.27,(_f(398) => _f(399));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.26,(_f(396) => _f(397));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.25,(_f(394) => _f(395));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.24,(_f(392) => _f(393));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.23,(_f(390) => _f(391));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.22,(_f(388) => _f(389));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.21,(_f(386) => _f(387));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.20,(_f(384) => _f(385));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.19,(_f(382) => _f(383));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.18,(_f(380) => _f(381));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.17,(_f(378) => _f(379));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.16,(_f(376) => _f(377));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.15,(_f(374) => _f(375));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.14,(_f(372) => _f(373));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.13,(_f(370) => _f(371));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.12,(_f(368) => _f(369));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.11,(_f(366) => _f(367));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.10,(_f(364) => _f(365));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.9,(_f(362) => _f(363));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.8,(_f(360) => _f(361));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.7,(_f(358) => _f(359));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.6,(_f(356) => _f(357));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.5,(_f(354) => _f(355));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.4,(_f(352) => _f(353));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.3,(_f(350) => _f(351));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.2,(_f(348) => _f(349));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(345) & ext_INTSubstitution.1,(_f(346) => _f(347));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & ext_NMIPrecondition.4,(_f(342) => _f(343));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & ext_NMIPrecondition.3,(_f(340) => _f(341));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & ext_NMIPrecondition.2,(_f(338) => _f(339));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & ext_NMIPrecondition.1,(_f(336) => _f(337));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.11,(_f(334) => _f(335));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.10,(_f(332) => _f(333));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.9,(_f(330) => _f(331));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.8,(_f(328) => _f(329));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.7,(_f(326) => _f(327));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.6,(_f(324) => _f(325));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.5,(_f(322) => _f(323));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.4,(_f(320) => _f(321));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.3,(_f(318) => _f(319));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.2,(_f(316) => _f(317));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & ext_NMISubstitution.1,(_f(314) => _f(315));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.118,(_f(310) => _f(311));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.117,(_f(308) => _f(309));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.116,(_f(306) => _f(307));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.115,(_f(304) => _f(305));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.114,(_f(302) => _f(303));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.113,(_f(300) => _f(301));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.112,(_f(298) => _f(299));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.111,(_f(296) => _f(297));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.110,(_f(294) => _f(295));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.109,(_f(292) => _f(293));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.108,(_f(290) => _f(291));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.107,(_f(288) => _f(289));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.106,(_f(286) => _f(287));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.105,(_f(284) => _f(285));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.104,(_f(282) => _f(283));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.103,(_f(280) => _f(281));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.102,(_f(278) => _f(279));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.101,(_f(276) => _f(277));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.100,(_f(274) => _f(275));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.99,(_f(272) => _f(273));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.98,(_f(270) => _f(271));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.97,(_f(268) => _f(269));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.96,(_f(266) => _f(267));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.95,(_f(264) => _f(265));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.94,(_f(262) => _f(263));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.93,(_f(260) => _f(261));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.92,(_f(258) => _f(259));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.91,(_f(256) => _f(257));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.90,(_f(254) => _f(255));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.89,(_f(252) => _f(253));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.88,(_f(250) => _f(251));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.87,(_f(248) => _f(249));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.86,(_f(246) => _f(247));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.85,(_f(244) => _f(245));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.84,(_f(242) => _f(243));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.83,(_f(240) => _f(241));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.82,(_f(238) => _f(239));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.81,(_f(236) => _f(237));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.80,(_f(234) => _f(235));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.79,(_f(232) => _f(233));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.78,(_f(230) => _f(231));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.77,(_f(228) => _f(229));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.76,(_f(226) => _f(227));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.75,(_f(224) => _f(225));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.74,(_f(222) => _f(223));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.73,(_f(220) => _f(221));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.72,(_f(218) => _f(219));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.71,(_f(216) => _f(217));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.70,(_f(214) => _f(215));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.69,(_f(212) => _f(213));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.68,(_f(210) => _f(211));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.67,(_f(208) => _f(209));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.66,(_f(206) => _f(207));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.65,(_f(204) => _f(205));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.64,(_f(202) => _f(203));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.63,(_f(200) => _f(201));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.62,(_f(198) => _f(199));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.61,(_f(196) => _f(197));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.60,(_f(194) => _f(195));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.59,(_f(192) => _f(193));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.58,(_f(190) => _f(191));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.57,(_f(188) => _f(189));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.56,(_f(186) => _f(187));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.55,(_f(184) => _f(185));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.54,(_f(182) => _f(183));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.53,(_f(180) => _f(181));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.52,(_f(178) => _f(179));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.51,(_f(176) => _f(177));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.50,(_f(174) => _f(175));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.49,(_f(172) => _f(173));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.48,(_f(170) => _f(171));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.47,(_f(168) => _f(169));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.46,(_f(166) => _f(167));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.45,(_f(164) => _f(165));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.44,(_f(162) => _f(163));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.43,(_f(160) => _f(161));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.42,(_f(158) => _f(159));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.41,(_f(156) => _f(157));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.40,(_f(154) => _f(155));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.39,(_f(152) => _f(153));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.38,(_f(150) => _f(151));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.37,(_f(148) => _f(149));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.36,(_f(146) => _f(147));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.35,(_f(144) => _f(145));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.34,(_f(142) => _f(143));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.33,(_f(140) => _f(141));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.32,(_f(138) => _f(139));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.31,(_f(136) => _f(137));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.30,(_f(134) => _f(135));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.29,(_f(132) => _f(133));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.28,(_f(130) => _f(131));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.27,(_f(128) => _f(129));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.26,(_f(126) => _f(127));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.25,(_f(124) => _f(125));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.24,(_f(122) => _f(123));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.23,(_f(120) => _f(121));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.22,(_f(118) => _f(119));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.21,(_f(116) => _f(117));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.20,(_f(114) => _f(115));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.19,(_f(112) => _f(113));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.18,(_f(110) => _f(111));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.17,(_f(108) => _f(109));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.16,(_f(106) => _f(107));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.15,(_f(104) => _f(105));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.14,(_f(102) => _f(103));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.13,(_f(100) => _f(101));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.12,(_f(98) => _f(99));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.11,(_f(96) => _f(97));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.10,(_f(94) => _f(95));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.9,(_f(92) => _f(93));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.8,(_f(90) => _f(91));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.7,(_f(88) => _f(89));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.6,(_f(86) => _f(87));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.5,(_f(84) => _f(85));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.4,(_f(82) => _f(83));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.3,(_f(80) => _f(81));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(78) => _f(79));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(76) => _f(77));
_f(5) & _f(4) & Properties.32,(_f(74) => _f(75));
_f(5) & _f(4) & Properties.31,(_f(72) => _f(73));
_f(5) & _f(4) & Properties.30,(_f(70) => _f(71));
_f(5) & _f(4) & Properties.29,(_f(68) => _f(69));
_f(5) & _f(4) & Properties.28,(_f(66) => _f(67));
_f(5) & _f(4) & Properties.27,(_f(64) => _f(65));
_f(5) & _f(4) & Properties.26,(_f(62) => _f(63));
_f(5) & _f(4) & Properties.25,(_f(60) => _f(61));
_f(5) & _f(4) & Properties.24,(_f(58) => _f(59));
_f(5) & _f(4) & Properties.23,(_f(56) => _f(57));
_f(5) & _f(4) & Properties.22,(_f(54) => _f(55));
_f(5) & _f(4) & Properties.21,(_f(52) => _f(53));
_f(5) & _f(4) & Properties.20,(_f(50) => _f(51));
_f(5) & _f(4) & Properties.19,(_f(48) => _f(49));
_f(5) & _f(4) & Properties.18,(_f(46) => _f(47));
_f(5) & _f(4) & Properties.17,(_f(44) => _f(45));
_f(5) & _f(4) & Properties.16,(_f(42) => _f(43));
_f(5) & _f(4) & Properties.15,(_f(40) => _f(41));
_f(5) & _f(4) & Properties.14,(_f(38) => _f(39));
_f(5) & _f(4) & Properties.13,(_f(36) => _f(37));
_f(5) & _f(4) & Properties.12,(_f(34) => _f(35));
_f(5) & _f(4) & Properties.11,(_f(32) => _f(33));
_f(5) & _f(4) & Properties.10,(_f(30) => _f(31));
_f(5) & _f(4) & Properties.9,(_f(28) => _f(29));
_f(5) & _f(4) & Properties.8,(_f(26) => _f(27));
_f(5) & _f(4) & Properties.7,(_f(24) => _f(25));
_f(5) & _f(4) & Properties.6,(_f(22) => _f(23));
_f(5) & _f(4) & Properties.5,(_f(20) => _f(21));
_f(5) & _f(4) & Properties.4,(_f(18) => _f(19));
_f(5) & _f(4) & Properties.3,(_f(16) => _f(17));
_f(5) & _f(4) & Properties.2,(_f(14) => _f(15));
_f(5) & _f(4) & Properties.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & get_bv_reg16 = %(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16 | byte_bv16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8)))\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16 | byte_bv16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8)))\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16 | byte_bv16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8)))\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 4|->id_reg_16 | sp_)\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16 | byte_bv16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8))));
("`Seen and used machines properties'" & is_zero16USHORT = %nat1.(nat1: USHORT | bool_bit(bool(nat1 = 0))) & is_negative = %w1.(w1: BYTE | w1(7)) & half8UCHAR = %ww.(ww: UCHAR | ww mod 16) & inc = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+1) mod 256)) & dec = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+255) mod 256)) & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 256) & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1+w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)+half8UCHAR(w2))),bool_bit(bool((carry+w1+w2) mod 256 = 0))) & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+(256-w2)) mod 256,bool_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1-w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)-half8UCHAR(w2))),bool_bit(bool((carry+w1+(256-w2)) mod 256 = 0))) & add16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+w2) mod 65536) & add_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65536<=b1+w1+w2))) & add_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=b1+w1 mod 4096+w2 mod 4096))) & sub16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+(65536-w2)) mod 65536) & sub_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65537<=w1+w2-b1))) & sub_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=w1 mod 4096+w2 mod 4096-b1))) & inc_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+1) mod 65536)) & dec_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+65536-1) mod 65536)) & update_refresh_reg = %v0.(v0: BYTE | uchar_byte(128*v0(8)+(64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) mod 128)) & instruction_next = %w1.(w1: USHORT | (w1+1) mod 65536) & instruction_jump = %(p0,e0).(p0: USHORT & e0: -126..129 | (p0+e0+65536) mod 65536) & BIT = {0}\/{1} & bit_not: BIT +-> BIT & bit_not~: BIT +-> BIT & dom(bit_not) = BIT & ran(bit_not) = BIT & bit_not = {0|->1}\/{1|->0} & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & bit_and = {(0,0)|->0}\/{(0,1)|->0}\/{(1,0)|->0}\/{(1,1)|->1} & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & bit_or = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->1} & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & bit_xor = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->0} & bool_bit = {TRUE|->1}\/{FALSE|->0} & BYTE_INDEX = 1..8 & PHYS_BYTE_INDEX = 0..7 & BYTE = BYTE_INDEX --> BIT & !b1.(b1: BYTE => size(b1) = 8 & b1: seq(BIT) & not(b1 = {})) & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_bit(bool(w1(1) = w1(2) & w1(2) = w1(3) & w1(3) = w1(4) & w1(4) = w1(5) & w1(5) = w1(6) & w1(6) = w1(7) & w1(7) = w1(8) & w1(8) = 0))) & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & parity_even = %bv.(bv: BYTE | 1-(bv(1)+bv(2)+bv(3)+bv(4)+bv(5)+bv(6)+bv(7)+bv(8)) mod 2) & bv8_and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_and(bt1(idx),bt2(idx)))) & bv8_or = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_or(bt1(idx),bt2(idx)))) & bv8_xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_xor(bt1(idx),bt2(idx)))) & bv8get: BYTE*PHYS_BYTE_INDEX +-> BIT & dom(bv8get) = BYTE*PHYS_BYTE_INDEX & bv8get = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1(ii+1)) & bitset: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*PHYS_BYTE_INDEX & bitset = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1<+{ii+1|->1}) & bitclear: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & bitclear = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1<+{ii+1|->0}) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | %idx.(idx: 1..8 | bit_not(bt(idx)))) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(8)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}\/{8|->bt(4)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {1|->bv(8)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}\/{8|->bv(7)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(8)}\/{8|->bv(1)}) & get_upper_digit: BYTE +-> 0..15 & dom(get_upper_digit) = BYTE & get_upper_digit = %by.(by: BYTE | 8*by(8)+4*by(7)+2*by(6)+by(5)) & get_lower_digit: BYTE +-> 0..15 & dom(get_lower_digit) = BYTE & get_lower_digit = %by.(by: BYTE | 8*by(4)+4*by(3)+2*by(2)+by(1)) & BV16_INDX = 1..16 & PHYS_BV16_INDEX = 0..15 & BV16 = BV16_INDX --> BIT & !b1.(b1: BV16 => size(b1) = 16 & b1: seq(BIT) & not(b1 = {})) & complement16 = %bt.(bt: BV16 | %idx.(idx: 1..16 | bit_not(bt(idx)))) & bv16_byte = %bv.(bv: BV16 | {8|->bv(16)}\/{7|->bv(15)}\/{6|->bv(14)}\/{5|->bv(13)}\/{4|->bv(12)}\/{3|->bv(11)}\/{2|->bv(10)}\/{1|->bv(9)},{8|->bv(8)}\/{7|->bv(7)}\/{6|->bv(6)}\/{5|->bv(5)}\/{4|->bv(4)}\/{3|->bv(3)}\/{2|->bv(2)}\/{1|->bv(1)}) & byte_bv16 = %(bv1,bv2).(bv1: BYTE & bv2: BYTE | {16|->bv1(8)}\/{15|->bv1(7)}\/{14|->bv1(6)}\/{13|->bv1(5)}\/{12|->bv1(4)}\/{11|->bv1(3)}\/{10|->bv1(2)}\/{9|->bv1(1)}\/{8|->bv2(8)}\/{7|->bv2(7)}\/{6|->bv2(6)}\/{5|->bv2(5)}\/{4|->bv2(4)}\/{3|->bv2(3)}\/{2|->bv2(2)}\/{1|->bv2(1)}) & UCHAR_MAX = 255 & UCHAR_MIN = 0 & UCHAR = UCHAR_MIN..UCHAR_MAX & byte_uchar = %v0.(v0: BYTE | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) & uchar_byte = %v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]) & SCHAR_MAX = 127 & SCHAR_MIN = -128 & SCHAR = SCHAR_MIN..SCHAR_MAX & byte_schar = %v0.(v0: BYTE | (-128)*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) & schar_byte = %v0.(v0: SCHAR & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])\/%v0.(v0: SCHAR & not(0<=v0) | [(v0+256) mod 2/1,(v0+256) mod 4/2,(v0+256) mod 8/4,(v0+256) mod 16/8,(v0+256) mod 32/16,(v0+256) mod 64/32,(v0+256) mod 128/64,(v0+256) mod 256/128]) & uchar_schar = %v1.(v1: UCHAR & v1<=SCHAR_MAX | v1)\/%v1.(v1: UCHAR & not(v1<=SCHAR_MAX) | v1-256) & schar_uchar = %v1.(v1: 0..127 | v1)\/%v1.(v1: -128.. -1 | v1+256) & SSHORT_MIN = -32768 & SSHORT_MAX = 32767 & SSHORT = SSHORT_MIN..SSHORT_MAX & bv16_sshort = %v0.(v0: BV16 | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) & sshort_bv16 = %v0.(v0: SSHORT & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768])\/%v0.(v0: SSHORT & not(0<=v0) | [(v0+USHORT_MAX+1) mod 2/1,(v0+USHORT_MAX+1) mod 4/2,(v0+USHORT_MAX+1) mod 8/4,(v0+USHORT_MAX+1) mod 16/8,(v0+USHORT_MAX+1) mod 32/16,(v0+USHORT_MAX+1) mod 64/32,(v0+USHORT_MAX+1) mod 128/64,(v0+USHORT_MAX+1) mod 256/128,(v0+USHORT_MAX+1) mod 512/256,(v0+USHORT_MAX+1) mod 1024/512,(v0+USHORT_MAX+1) mod 2048/1024,(v0+USHORT_MAX+1) mod 4096/2048,(v0+USHORT_MAX+1) mod 8192/4096,(v0+USHORT_MAX+1) mod 16384/8192,(v0+USHORT_MAX+1) mod 32768/16384,(v0+USHORT_MAX+1) mod 65536/32768]) & ushort_sshort = %v1.(v1: USHORT & v1<=SSHORT_MAX | v1)\/%v1.(v1: USHORT & not(v1<=SSHORT_MAX) | v1-USHORT_MAX-1) & sshort_ushort = %v1.(v1: SSHORT & 0<=v1 | v1)\/%v1.(v1: SSHORT & not(0<=v1) | v1+USHORT_MAX+1) & schar_sshort = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))) & USHORT_MAX = 65535 & USHORT_MIN = 0 & USHORT = USHORT_MIN..USHORT_MAX & bv16_ushort = %v0.(v0: BV16 | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) & ushort_bv16 = %v0.(v0: USHORT | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]) & uchar_ushort = %(w1,w2).(w1: UCHAR & w2: UCHAR | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))));
("`Included,imported and extended machines properties'" & PROGRAM_R_ADR = USHORT & DATA_R_ADR = USHORT & STACK_R_ADR = USHORT);
("`Component invariant'" & rgs8: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..16)*{id_reg_8} & pc: USHORT & sp: BV16 & ix: BV16 & iy: BV16 & i_: BYTE & r_: BYTE & iff1: BIT & iff2: BIT & im: BIT*BIT & io_ports: BYTE +-> BYTE & dom(io_ports) = BYTE & btrue & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & mem: BV16 +-> BYTE & dom(mem) = BV16);
("`Component assertions'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..16)*{id_reg_8} & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE & dec(rgs8(5|->id_reg_8)): BYTE);
("`Seen and used machines assertions'" & is_zero16USHORT: USHORT +-> BIT & dom(is_zero16USHORT) = USHORT & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & half8UCHAR: UCHAR +-> UCHAR & dom(half8UCHAR) = UCHAR & inc: BYTE +-> BYTE & dom(inc) = BYTE & dec: BYTE +-> BYTE & dom(dec) = BYTE & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & add16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(add16USHORT) = BIT*USHORT*USHORT & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & add_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & sub16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(sub16USHORT) = BIT*USHORT*USHORT & sub_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & dec_BV16: BV16 +-> BV16 & dom(dec_BV16) = BV16 & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & instruction_next: USHORT +-> USHORT & dom(instruction_next) = USHORT & instruction_jump: USHORT*(-126..129) +-> USHORT & dom(instruction_jump) = USHORT*(-126..129) & dom(is_zero16USHORT) = USHORT & ran(is_zero16USHORT) = BIT & dom(is_negative) = BYTE & ran(is_negative) = BIT & dom(half8UCHAR) = UCHAR & ran(half8UCHAR): POW(UCHAR) & dom(inc) = BYTE & ran(inc) = BYTE & dom(dec) = BYTE & ran(dec) = BYTE & dom(simple_add8UCHAR) = UCHAR*UCHAR & ran(simple_add8UCHAR) = UCHAR & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(add16USHORT) = BIT*USHORT*USHORT & ran(add16USHORT) = USHORT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & ran(add_carryUSHORT) = BIT & dom(sub16USHORT) = BIT*USHORT*USHORT & ran(sub16USHORT) = USHORT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & ran(sub_carryUSHORT) = BIT & dom(inc_BV16) = BV16 & ran(inc_BV16) = BV16 & dom(dec_BV16) = BV16 & ran(dec_BV16) = BV16 & dom(update_refresh_reg) = BYTE & ran(update_refresh_reg) = BYTE & dom(instruction_next) = USHORT & ran(instruction_next) = USHORT & dom(instruction_jump) = USHORT*(-126..129) & ran(instruction_jump) = USHORT & 0 = schar_sshort(0,0) & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & byte_uchar: BYTE +-> UCHAR & byte_uchar~: UCHAR +-> BYTE & dom(byte_uchar) = BYTE & ran(byte_uchar) = UCHAR & uchar_byte: UCHAR +-> BYTE & uchar_byte~: BYTE +-> UCHAR & dom(uchar_byte) = UCHAR & ran(uchar_byte) = BYTE & byte_uchar = uchar_byte~ & schar_uchar: SCHAR +-> UCHAR & schar_uchar~: UCHAR +-> SCHAR & dom(schar_uchar) = SCHAR & ran(schar_uchar) = UCHAR & uchar_schar: UCHAR +-> SCHAR & uchar_schar~: SCHAR +-> UCHAR & dom(uchar_schar) = UCHAR & ran(uchar_schar) = SCHAR & schar_uchar = uchar_schar~ & byte_schar: BYTE +-> SCHAR & byte_schar~: SCHAR +-> BYTE & dom(byte_schar) = BYTE & ran(byte_schar) = SCHAR & schar_byte: SCHAR +-> BYTE & schar_byte~: BYTE +-> SCHAR & dom(schar_byte) = SCHAR & ran(schar_byte) = BYTE & byte_schar = schar_byte~ & bv16_byte: BV16 +-> BYTE*BYTE & bv16_byte~: BYTE*BYTE +-> BV16 & dom(bv16_byte) = BV16 & ran(bv16_byte) = BYTE*BYTE & byte_bv16: BYTE*BYTE +-> BV16 & byte_bv16~: BV16 +-> BYTE*BYTE & dom(byte_bv16) = BYTE*BYTE & ran(byte_bv16) = BV16 & bv16_byte = byte_bv16~ & bv16_ushort: BV16 +-> USHORT & bv16_ushort~: USHORT +-> BV16 & dom(bv16_ushort) = BV16 & ran(bv16_ushort) = USHORT & ushort_bv16: USHORT +-> BV16 & ushort_bv16~: BV16 +-> USHORT & dom(ushort_bv16) = USHORT & ran(ushort_bv16) = BV16 & bv16_ushort = ushort_bv16~ & uchar_ushort: UCHAR*UCHAR +-> USHORT & uchar_ushort~: USHORT +-> UCHAR*UCHAR & dom(uchar_ushort) = UCHAR*UCHAR & ran(uchar_ushort) = USHORT & bv16_sshort: BV16 +-> SSHORT & bv16_sshort~: SSHORT +-> BV16 & dom(bv16_sshort) = BV16 & ran(bv16_sshort) = SSHORT & sshort_bv16: SSHORT +-> BV16 & sshort_bv16~: BV16 +-> SSHORT & dom(sshort_bv16) = SSHORT & ran(sshort_bv16) = BV16 & bv16_sshort = sshort_bv16~ & schar_sshort: SCHAR*SCHAR +-> SSHORT & schar_sshort~: SSHORT +-> SCHAR*SCHAR & dom(schar_sshort) = SCHAR*SCHAR & ran(schar_sshort) = SSHORT & sshort_ushort: SSHORT +-> USHORT & sshort_ushort~: USHORT +-> SSHORT & dom(sshort_ushort) = SSHORT & ran(sshort_ushort) = USHORT & ushort_sshort: USHORT +-> SSHORT & ushort_sshort~: SSHORT +-> USHORT & dom(ushort_sshort) = USHORT & ran(ushort_sshort) = SSHORT & sshort_ushort = ushort_sshort~ & !bb.(bb: BIT => bit_not(bb) = 1-bb) & dom(bit_and) = BIT*BIT & ran(bit_not) = BIT & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & dom(bit_and) = BIT*BIT & ran(bit_and) = BIT & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & dom(bit_or) = BIT*BIT & ran(bit_or) = BIT & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & dom(bit_xor) = BIT*BIT & ran(bit_xor) = BIT & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & dom(bool_bit) = BOOL & ran(bit_xor) = BIT & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & card(BYTE) = 256 & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & bv8_and: BYTE*BYTE +-> BYTE & dom(bv8_and) = BYTE*BYTE & bv8_or: BYTE*BYTE +-> BYTE & dom(bv8_or) = BYTE*BYTE & bv8_xor: BYTE*BYTE +-> BYTE & dom(bv8_xor) = BYTE*BYTE & complement: BYTE +-> BYTE & dom(complement) = BYTE & swap: BYTE +-> BYTE & dom(swap) = BYTE & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & !bt.(bt: BYTE => size(bt) = 8) & 8: INTEGER & btrue & dom(is_zero) = BYTE & ran(is_zero): POW(BIT) & dom(parity_even) = BYTE & ran(parity_even): POW(BIT) & bv8_and: BYTE*BYTE +-> BYTE & dom(bv8_and) = BYTE*BYTE & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & dom(get_upper_digit) = BYTE & ran(get_upper_digit): POW(0..15) & dom(get_lower_digit) = BYTE & ran(get_lower_digit): POW(0..15) & [1,1,1,1,1,1,1,1]: BYTE & [0,0,0,0,0,0,0,0]: BYTE & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & card(BV16) = 65536 & complement16: BV16 +-> BV16 & dom(complement16) = BV16 & byte_bv16 = bv16_byte~ & [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]: BV16 & [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]: BV16 & card(byte_uchar) = 256 & card(uchar_byte) = 256 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & card(byte_schar) = 256 & card(schar_byte) = 256 & SCHAR_MAX: INTEGER & SCHAR_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & card(bv16_sshort) = 65536 & card(sshort_bv16) = 65536 & SSHORT_MIN: SSHORT & SSHORT_MAX: SSHORT & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & card(bv16_ushort) = 65536 & card(ushort_bv16) = 65536 & USHORT_MAX: INTEGER & USHORT_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & 2**0 = 1 & 2**1 = 2 & 2**2 = 4 & 2**3 = 8 & 2**4 = 16 & 2**5 = 32 & 2**6 = 64 & 2**7 = 128 & (-2)**7 = -128 & 2**8 = 256 & 2**9 = 512 & 2**10 = 1024 & 2**11 = 2048 & 2**12 = 4096 & 2**13 = 8192 & 2**14 = 16384 & 2**15 = 32768 & 2**16 = 65536);
("`Included,imported and extended machines assertions'" & ran(mem): POW(BYTE) & dom(mem) = BV16 & !(address,value).(address: BV16 & value: BYTE => mem<+{address|->value}: BV16 +-> BYTE & dom(mem<+{address|->value}) = BV16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0);
(rgs8_(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1);
(rgs8_(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2);
(rgs8_(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3);
(rgs8_(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4);
(rgs8_(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5);
(rgs8_(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6);
(rgs8_(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7);
(rgs8_(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(5|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(6|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(9|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(10|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(13|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(14|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(1|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & btrue);
(REG16_TO_REG8: FIN(REG16_TO_REG8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5);
(update_flag_reg: FIN(update_flag_reg));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT);
(b1,b2,b3,b4,b5,b6: dom(update_flag_reg));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}));
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}));
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}));
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(0,bv16_ushort(sp),1: dom(add16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(add16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16);
(0,bv16_ushort(sp),2: dom(add16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16);
(add16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT);
(rgs8(2|->id_reg_8),5: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT);
(rgs8(2|->id_reg_8),4: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT);
(rgs8(2|->id_reg_8),3: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT);
(rgs8(2|->id_reg_8),1: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT);
(rgs8(6|->id_reg_8): dom(io_ports));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE);
(rgs8(5|->id_reg_8): dom(dec));
("`ext_NMI preconditions in previous components'" & btrue);
("`ext_NMI preconditions in this component'" & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR);
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE);
(ushort_bv16(pc): dom(bv16_byte));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & btrue);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`ext_INT preconditions in previous components'" & btrue);
("`ext_INT preconditions in this component'" & iff1 = 1 & byte_bus: 0..255 & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE);
(ushort_bv16(pc): dom(bv16_byte));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255));
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255));
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255));
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255));
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & im = 0|->0 & (byte_bus = 199 or byte_bus = 207 or byte_bus = 215 or byte_bus = 223 or byte_bus = 231 or byte_bus = 239 or byte_bus = 247 or byte_bus = 255) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & im = 0|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(byte_bus: dom(uchar_byte));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(uchar_byte(byte_bus): dom(rotateleft));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(rotateleft(uchar_byte(byte_bus)),0: dom(bitclear));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(i_,bitclear(rotateleft(uchar_byte(byte_bus)),0): dom(byte_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(byte_bv16(i_,bitclear(rotateleft(uchar_byte(byte_bus)),0)): dom(bv16_ushort));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_low: BYTE & pc_high: BYTE & bv16_byte(ushort_bv16(pc)) = pc_low|->pc_high & not(im = 0|->0) & not(im = 0|->1) & im = 1|->1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_low}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_high}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & iff1 = 1 & byte_bus: 0..255);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & iff1 = 1 & byte_bus: 0..255);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`ext_RESET preconditions in previous components'" & btrue);
("`ext_RESET preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(0: dom(uchar_byte));
("`Local hypotheses'" & btrue);
(0: dom(uchar_byte));
("`Local hypotheses'" & btrue);
(255: dom(uchar_byte));
("`Local hypotheses'" & btrue);
(255: dom(uchar_byte));
("`Local hypotheses'" & btrue);
(255: dom(uchar_byte));
("`Local hypotheses'" & btrue);
(255: dom(uchar_byte));
("`Local hypotheses'" & btrue);
(uchar_byte(255),uchar_byte(255): dom(byte_bv16));
("`io_read preconditions in previous components'" & btrue);
("`io_read preconditions in this component'" & aa: (1..16)*{id_reg_8});
("`io_write preconditions in previous components'" & btrue);
("`io_write preconditions in this component'" & aa: (1..16)*{id_reg_8} & value: BYTE)

END
&

THEORY EnumerateX IS
(id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0});
(id_reg_16 == {BC,DE,HL,SP,AF})

END
