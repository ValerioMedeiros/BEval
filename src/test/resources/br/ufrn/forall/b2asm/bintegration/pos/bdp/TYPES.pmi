THEORY BalanceX IS
  TYPES,71,39,0,7,0,0,0;
  AssertionLemmas,71,39,0,7,0,0,0;
  Initialisation,0,0,0,0,0,0,0
END
&
THEORY ProofState IS
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(0);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Unproved;
  Proved(0);
  Unproved;
  Unproved;
  Proved(0);
  Proved(Util);
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(Util);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(Util);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(Util);
  Unproved;
  Unproved;
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util);
  Proved(Util)
END
&
THEORY MethodList IS
  dd & eh(byte_uchar,_h,Goal) & eh(BYTE,_h,Goal) & eh(UCHAR,_h,Goal) & mp(Tac(RulesProBAssertionLemmas_71));
  dd & eh(byte_uchar,_h,Goal) & eh(BYTE,_h,Goal) & pr;
  dd & eh(byte_uchar,_h,Goal) & eh(BYTE,_h,Goal) & eh(UCHAR,_h,Goal) & ah(%v0.(v0: 1..8 --> {0,1} | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): 1..8 --> {0,1} >->> 0..255) & pr(Tac(Rules)) & pr;
  dd & eh(byte_uchar,_h,Goal) & eh(BYTE,_h,Goal) & eh(UCHAR,_h,Goal) & ah(%v0.(v0: 1..8 --> {0,1} | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): 1..8 --> {0,1} >->> 0..255) & pr(Tac(Rules)) & pr;
  ah(%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]): 0..255 >->> (1..8 --> {0,1})) & pr(Tac(Rules)) & eh(uchar_byte,_h,Goal) & eh(UCHAR,_h,Goal) & eh(BYTE,_h,Goal) & ar(SimplifyX.46,Goal) & ss & pr;
  dd & eh(uchar_byte,%v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]),Goal) & ss & pr;
  dd & eh(uchar_byte,%v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]),Goal) & eh(UCHAR,_h,Goal) & eh(BYTE,_h,Goal) & ah(%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]): 0..255 >->> (1..8 --> {0,1})) & pr(Tac(Rules)) & pr(Tac(SimplifyX));
  dd & eh(uchar_byte,%v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]),Goal) & eh(UCHAR,_h,Goal) & eh(BYTE,_h,Goal) & ah(%v0.(v0: 0..255 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]): 0..255 >->> (1..8 --> {0,1})) & pr(Tac(Rules)) & pr(Tac(SimplifyX));
  dd & eh(byte_uchar,_h,Goal) & eh(uchar_byte,_h,Goal) & eh(BYTE,_h,Goal) & eh(UCHAR,_h,Goal) & pr(Tac(Rules));
  dd & eh(schar_uchar,_h,Goal) & eh(UCHAR,_h,Goal) & ah(ran({yy,xx | xx: 0..255 & yy: SCHAR & xx<=127 & yy = xx}) = 0..127 & ran({yy,xx | xx: 0..255 & yy: SCHAR & 128<=xx & (0 = -256+xx-yy & yy = xx-256)}) = 128..255) & eh(SCHAR,_h,Goal) & pp(rp.0) & eh(SCHAR,_h,Goal) & pp(rp.0) & pp(rp.0);
  dd & eh(schar_uchar,_h,Goal) & eh(SCHAR,_h,Goal) & ss & pp(rt.0);
  dd & eh(schar_uchar,_h,Goal) & eh(SCHAR,_h,Goal) & eh(UCHAR,_h,Goal) & ss & pp(rt.0);
  dd & eh(schar_uchar,_h,Goal) & eh(SCHAR,_h,Goal) & eh(UCHAR,_h,Goal) & ss & pp(rt.0);
  dd & eh(uchar_schar,_h,Goal) & eh(UCHAR,_h,Goal) & eh(SCHAR,_h,Goal) & pp(rt.0);
  dd & eh(uchar_schar,_h,Goal) & eh(UCHAR,_h,Goal) & pp(rt.0);
  eh(uchar_schar,_h,Goal) & eh(UCHAR,_h,Goal) & eh(SCHAR,_h,Goal) & pp(rt.0);
  eh(uchar_schar,_h,Goal) & eh(UCHAR,_h,Goal) & eh(SCHAR,_h,Goal) & pp(rt.0);
  dd & eh(schar_uchar,_h,Goal) & eh(uchar_schar,_h,Goal) & eh(UCHAR,_h,Goal) & mp(Tac(RulesProBAssertionLemmas_1)) & mp(Tac(RulesProBAssertionLemmas_54));
  eh(byte_schar,_h,Goal) & dd & ah(%v0.(v0: 1..8 --> {0,1} | -(128*v0(8))+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..8 --> {0,1} >->> -128..127) & pr(Tac(Rules)) & pr(Tac(SimplifyX));
  pr;
  eh(byte_schar,_h,Goal) & dd & ah(%v0.(v0: 1..8 --> {0,1} | -(128*v0(8))+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..8 --> {0,1} >->> -128..127) & pr(Tac(Rules)) & pr(Tac(SimplifyX));
  eh(byte_schar,_h,Goal) & dd & ah(%v0.(v0: 1..8 --> {0,1} | -(128*v0(8))+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..8 --> {0,1} >->> -128..127) & pr(Tac(Rules)) & eh(BYTE,_h,Goal) & eh(SCHAR,_h,Goal) & ar(SimplifyX.46,Goal);
  eh(schar_byte,_h,Goal) & dd & ah(%v0.(v0: -128..127 & 0<=v0 | [v0 mod 2,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])\/%v0.(v0: -128..127 & not(0<=v0) | [(256+v0) mod 2,(256+v0) mod 4/2,(256+v0) mod 8/4,(256+v0) mod 16/8,(256+v0) mod 32/16,(256+v0) mod 64/32,(256+v0) mod 128/64,(256+v0) mod 256/128]): -128..127 >->> (1..8 --> {0,1})) & pr(Tac(Rules)) & eh(BYTE,_h,Goal) & eh(SCHAR,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & eh(schar_byte,_h,Goal) & eh(SCHAR,_h,Goal) & ss & pp(rt.0);
  eh(schar_byte,_h,Goal) & dd & ah(%v0.(v0: -128..127 & 0<=v0 | [v0 mod 2,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])\/%v0.(v0: -128..127 & not(0<=v0) | [(256+v0) mod 2,(256+v0) mod 4/2,(256+v0) mod 8/4,(256+v0) mod 16/8,(256+v0) mod 32/16,(256+v0) mod 64/32,(256+v0) mod 128/64,(256+v0) mod 256/128]): -128..127 >->> (1..8 --> {0,1})) & pr(Tac(Rules)) & eh(BYTE,_h,Goal) & eh(SCHAR,_h,Goal) & ar(SimplifyX.46,Goal);
  eh(schar_byte,_h,Goal) & dd & ah(%v0.(v0: -128..127 & 0<=v0 | [v0 mod 2,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])\/%v0.(v0: -128..127 & not(0<=v0) | [(256+v0) mod 2,(256+v0) mod 4/2,(256+v0) mod 8/4,(256+v0) mod 16/8,(256+v0) mod 32/16,(256+v0) mod 64/32,(256+v0) mod 128/64,(256+v0) mod 256/128]): -128..127 >->> (1..8 --> {0,1})) & pr(Tac(Rules)) & eh(BYTE,_h,Goal) & eh(SCHAR,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & eh(byte_schar,_h,Goal) & eh(schar_byte,_h,Goal) & eh(BYTE,_h,Goal) & eh(SCHAR,_h,Goal) & ss & pr(Tac(Rules));
  dd & eh(bv16_byte,_h,Goal) & eh(BV16,_h,Goal) & eh(BYTE,_h,Goal) & ah(%bv.(bv: 1..16 --> {0,1} | {8|->bv(16),7|->bv(15),6|->bv(14),5|->bv(13),4|->bv(12),3|->bv(11),2|->bv(10),1|->bv(9)},{8|->bv(8),7|->bv(7),6|->bv(6),5|->bv(5),4|->bv(4),3|->bv(3),2|->bv(2),1|->bv(1)}): 1..16 --> {0,1} >->> (1..8 --> {0,1})*(1..8 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  pr;
  dd & eh(bv16_byte,_h,Goal) & eh(BV16,_h,Goal) & eh(BYTE,_h,Goal) & ah(%bv.(bv: 1..16 --> {0,1} | {8|->bv(16),7|->bv(15),6|->bv(14),5|->bv(13),4|->bv(12),3|->bv(11),2|->bv(10),1|->bv(9)},{8|->bv(8),7|->bv(7),6|->bv(6),5|->bv(5),4|->bv(4),3|->bv(3),2|->bv(2),1|->bv(1)}): 1..16 --> {0,1} >->> (1..8 --> {0,1})*(1..8 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(bv16_byte,_h,Goal) & eh(BV16,_h,Goal) & eh(BYTE,_h,Goal) & ah(%bv.(bv: 1..16 --> {0,1} | {8|->bv(16),7|->bv(15),6|->bv(14),5|->bv(13),4|->bv(12),3|->bv(11),2|->bv(10),1|->bv(9)},{8|->bv(8),7|->bv(7),6|->bv(6),5|->bv(5),4|->bv(4),3|->bv(3),2|->bv(2),1|->bv(1)}): 1..16 --> {0,1} >->> (1..8 --> {0,1})*(1..8 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  pr;
  dd & eh(byte_bv16,%(bv1,bv2).(bv1: BYTE & bv2: BYTE | {16|->bv1(8),15|->bv1(7),14|->bv1(6),13|->bv1(5),12|->bv1(4),11|->bv1(3),10|->bv1(2),9|->bv1(1),8|->bv2(8),7|->bv2(7),6|->bv2(6),5|->bv2(5),4|->bv2(4),3|->bv2(3),2|->bv2(2),1|->bv2(1)}),Goal) & ss & pp(rt.0);
  dd & eh(byte_bv16,%(bv1,bv2).(bv1: BYTE & bv2: BYTE | {16|->bv1(8),15|->bv1(7),14|->bv1(6),13|->bv1(5),12|->bv1(4),11|->bv1(3),10|->bv1(2),9|->bv1(1),8|->bv2(8),7|->bv2(7),6|->bv2(6),5|->bv2(5),4|->bv2(4),3|->bv2(3),2|->bv2(2),1|->bv2(1)}),Goal) & eh(BYTE,_h,Goal) & eh(BV16,_h,Goal) & ah(%(bv1,bv2).(bv1: 1..8 --> {0,1} & bv2: 1..8 --> {0,1} | {16|->bv1(8),15|->bv1(7),14|->bv1(6),13|->bv1(5),12|->bv1(4),11|->bv1(3),10|->bv1(2),9|->bv1(1),8|->bv2(8),7|->bv2(7),6|->bv2(6),5|->bv2(5),4|->bv2(4),3|->bv2(3),2|->bv2(2),1|->bv2(1)}): (1..8 --> {0,1})*(1..8 --> {0,1}) >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(byte_bv16,%(bv1,bv2).(bv1: BYTE & bv2: BYTE | {16|->bv1(8),15|->bv1(7),14|->bv1(6),13|->bv1(5),12|->bv1(4),11|->bv1(3),10|->bv1(2),9|->bv1(1),8|->bv2(8),7|->bv2(7),6|->bv2(6),5|->bv2(5),4|->bv2(4),3|->bv2(3),2|->bv2(2),1|->bv2(1)}),Goal) & eh(BYTE,_h,Goal) & eh(BV16,_h,Goal) & ah(%(bv1,bv2).(bv1: 1..8 --> {0,1} & bv2: 1..8 --> {0,1} | {16|->bv1(8),15|->bv1(7),14|->bv1(6),13|->bv1(5),12|->bv1(4),11|->bv1(3),10|->bv1(2),9|->bv1(1),8|->bv2(8),7|->bv2(7),6|->bv2(6),5|->bv2(5),4|->bv2(4),3|->bv2(3),2|->bv2(2),1|->bv2(1)}): (1..8 --> {0,1})*(1..8 --> {0,1}) >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  pr;
  dd & eh(bv16_ushort,_h,Goal) & eh(USHORT,_h,Goal) & eh(BV16,_h,Goal) & ah(%v0.(v0: 1..16 --> {0,1} | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): 1..16 --> {0,1} >->> 0..65535) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  pr;
  dd & eh(bv16_ushort,_h,Goal) & eh(USHORT,_h,Goal) & eh(BV16,_h,Goal) & ah(%v0.(v0: 1..16 --> {0,1} | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): 1..16 --> {0,1} >->> 0..65535) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(bv16_ushort,_h,Goal) & eh(USHORT,_h,Goal) & eh(BV16,_h,Goal) & ah(%v0.(v0: 1..16 --> {0,1} | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)): 1..16 --> {0,1} >->> 0..65535) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(ushort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(USHORT,_h,Goal) & ah(%v0.(v0: 0..65535 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]): 0..65535 >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  pr;
  dd & eh(ushort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(USHORT,_h,Goal) & ah(%v0.(v0: 0..65535 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]): 0..65535 >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(ushort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(USHORT,_h,Goal) & ah(%v0.(v0: 0..65535 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]): 0..65535 >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(bv16_ushort,_h,Goal) & eh(ushort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(USHORT,_h,Goal) & pr(Tac(Rules));
  dd & eh(uchar_ushort,_h,Goal) & eh(bv16_ushort,_h,Goal) & eh(byte_bv16,%(bv1,bv2).(bv1: BYTE & bv2: BYTE | {16|->bv1(8),15|->bv1(7),14|->bv1(6),13|->bv1(5),12|->bv1(4),11|->bv1(3),10|->bv1(2),9|->bv1(1),8|->bv2(8),7|->bv2(7),6|->bv2(6),5|->bv2(5),4|->bv2(4),3|->bv2(3),2|->bv2(2),1|->bv2(1)}),Goal) & eh(uchar_byte,%v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]),Goal) & eh(BYTE,_h,Goal) & eh(UCHAR,_h,Goal) & eh(USHORT,_h,Goal) & eh(BV16,_h,Goal);
  dd & eh(uchar_ushort,_h,Goal) & pp(rt.0);
  eh(USHORT,_h,Goal) & eh(uchar_ushort,_h,Goal) & eh(UCHAR,_h,Goal) & ah(%(w1,w2).(w1: 0..255 & w2: 0..255 | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))): (0..255)*(0..255) >->> 0..65535) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal) & pr;
  eh(USHORT,_h,Goal) & eh(uchar_ushort,_h,Goal) & eh(UCHAR,_h,Goal) & ah(%(w1,w2).(w1: 0..255 & w2: 0..255 | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))): (0..255)*(0..255) >->> 0..65535) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal) & pr;
  dd & ah(%v0.(v0: 1..16 --> {0,1} | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..16 --> {0,1} >->> -32768..32767) & pr(Tac(Rules)) & eh(bv16_sshort,_h,Goal) & eh(BV16,_h,Goal) & eh(SSHORT,_h,Goal) & ar(SimplifyX.46,Goal);
  pr;
  dd & ah(%v0.(v0: 1..16 --> {0,1} | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..16 --> {0,1} >->> -32768..32767) & pr(Tac(Rules)) & eh(bv16_sshort,_h,Goal) & eh(BV16,_h,Goal) & eh(SSHORT,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & ah(%v0.(v0: 1..16 --> {0,1} | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)): 1..16 --> {0,1} >->> -32768..32767) & pr(Tac(Rules)) & eh(bv16_sshort,_h,Goal) & eh(BV16,_h,Goal) & eh(SSHORT,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & ah(%v0.(v0: -32768..32767 & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768])\/%v0.(v0: -32768..32767 & not(0<=v0) | [(v0+65535+1) mod 2/1,(v0+65535+1) mod 4/2,(v0+65535+1) mod 8/4,(v0+65535+1) mod 16/8,(v0+65535+1) mod 32/16,(v0+65535+1) mod 64/32,(v0+65535+1) mod 128/64,(v0+65535+1) mod 256/128,(v0+65535+1) mod 512/256,(v0+65535+1) mod 1024/512,(v0+65535+1) mod 2048/1024,(v0+65535+1) mod 4096/2048,(v0+65535+1) mod 8192/4096,(v0+65535+1) mod 16384/8192,(v0+65535+1) mod 32768/16384,(v0+65535+1) mod 65536/32768]): -32768..32767 >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & eh(sshort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(SSHORT,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & eh(sshort_bv16,_h,Goal) & ss & pp(rt.0);
  dd & ah(%v0.(v0: -32768..32767 & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768])\/%v0.(v0: -32768..32767 & not(0<=v0) | [(v0+65535+1) mod 2/1,(v0+65535+1) mod 4/2,(v0+65535+1) mod 8/4,(v0+65535+1) mod 16/8,(v0+65535+1) mod 32/16,(v0+65535+1) mod 64/32,(v0+65535+1) mod 128/64,(v0+65535+1) mod 256/128,(v0+65535+1) mod 512/256,(v0+65535+1) mod 1024/512,(v0+65535+1) mod 2048/1024,(v0+65535+1) mod 4096/2048,(v0+65535+1) mod 8192/4096,(v0+65535+1) mod 16384/8192,(v0+65535+1) mod 32768/16384,(v0+65535+1) mod 65536/32768]): -32768..32767 >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & eh(sshort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(SSHORT,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & ah(%v0.(v0: -32768..32767 & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768])\/%v0.(v0: -32768..32767 & not(0<=v0) | [(v0+65535+1) mod 2/1,(v0+65535+1) mod 4/2,(v0+65535+1) mod 8/4,(v0+65535+1) mod 16/8,(v0+65535+1) mod 32/16,(v0+65535+1) mod 64/32,(v0+65535+1) mod 128/64,(v0+65535+1) mod 256/128,(v0+65535+1) mod 512/256,(v0+65535+1) mod 1024/512,(v0+65535+1) mod 2048/1024,(v0+65535+1) mod 4096/2048,(v0+65535+1) mod 8192/4096,(v0+65535+1) mod 16384/8192,(v0+65535+1) mod 32768/16384,(v0+65535+1) mod 65536/32768]): -32768..32767 >->> (1..16 --> {0,1})) & pr(Tac(Rules)) & eh(sshort_bv16,_h,Goal) & eh(BV16,_h,Goal) & eh(SSHORT,_h,Goal) & ar(SimplifyX.46,Goal);
  dd & eh(bv16_sshort,_h,Goal) & eh(BV16,_h,Goal) & eh(sshort_bv16,_h,Goal) & eh(SSHORT,_h,Goal) & pr(Tac(Rules));
  dd & eh(schar_sshort,_h,Goal) & eh(SCHAR,_h,Goal) & eh(SSHORT,_h,Goal) & ah(%(w1,w2).(w1: -128..127 & w2: -128..127 | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))): (-128..127)*(-128..127) >->> -32768..32767) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & pr & pp(rt.0);
  dd & eh(schar_sshort,_h,Goal) & eh(SCHAR,_h,Goal) & eh(SSHORT,_h,Goal) & ah(%(w1,w2).(w1: -128..127 & w2: -128..127 | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))): (-128..127)*(-128..127) >->> -32768..32767) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  dd & eh(schar_sshort,_h,Goal) & eh(SCHAR,_h,Goal) & eh(SSHORT,_h,Goal) & ah(%(w1,w2).(w1: -128..127 & w2: -128..127 | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))): (-128..127)*(-128..127) >->> -32768..32767) & pr(Tac(Rules)) & ar(SimplifyX.46,Goal);
  eh(sshort_ushort,_h,Goal) & eh(SSHORT,_h,Goal) & eh(USHORT,_h,Goal) & ss & pr & pp(rt.0);
  dd & eh(sshort_ushort,_h,Goal) & eh(SSHORT,_h,Goal) & pp(rt.0);
  dd & eh(sshort_ushort,_h,Goal) & eh(SSHORT,_h,Goal) & eh(USHORT,_h,Goal) & ss & pp(rt.0);
  dd & eh(sshort_ushort,_h,Goal) & eh(SSHORT,_h,Goal) & eh(USHORT,_h,Goal) & ss & pp(rt.0);
  dd & eh(ushort_sshort,_h,Goal) & eh(USHORT,_h,Goal) & eh(SSHORT,_h,Goal) & mp(Tac(RulesProBAssertionLemmas_5));
  dd & eh(ushort_sshort,_h,Goal) & eh(USHORT,_h,Goal) & ss & pr & pp(rt.0);
  eh(SSHORT,_h,Goal) & eh(USHORT,_h,Goal) & dd & eh(ushort_sshort,_h,Goal) & eh(USHORT,_h,Goal) & mp(Tac(RulesProBAssertionLemmas_3));
  eh(ushort_sshort,_h,Goal) & eh(USHORT,_h,Goal) & dd & eh(SSHORT,_h,Goal) & pp(rt.0);
  dd & eh(sshort_ushort,_h,Goal) & eh(ushort_sshort,_h,Goal) & eh(SSHORT,_h,Goal) & eh(USHORT,_h,Goal) & mp(Tac(RulesProBAssertionLemmas_1))
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(3),?;
  Force(0),?;
  Force(3),?;
  Force(3),?;
  Force(3),?;
  Force(0),?;
  Force(3),?;
  Force(3),?;
  Force(0),?;
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),(?;0);
  Force(0),(?;0);
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),(?;0;1;2;3);
  Force(0),?;
  Force(0),(?;0;1;2;3)
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6");
  PRVersion("svn")(CLT == "V4.0-9385");
  PRVersion("svn")(CLT == "V4.0-31779")
END
