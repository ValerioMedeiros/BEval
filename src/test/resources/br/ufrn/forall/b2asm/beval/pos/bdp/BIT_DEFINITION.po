THEORY ProofList IS
  _f(1) & AssertionLemmas.49,(_f(8) & _f(114) => _f(115));
  _f(1) & AssertionLemmas.48,(_f(112) => _f(113));
  _f(1) & AssertionLemmas.47,(_f(110) => _f(111));
  _f(1) & AssertionLemmas.46,(_f(8) & _f(108) => _f(109));
  _f(1) & AssertionLemmas.45,(_f(106) => _f(107));
  _f(1) & AssertionLemmas.44,(_f(104) => _f(105));
  _f(1) & AssertionLemmas.43,(_f(102) => _f(103));
  _f(1) & AssertionLemmas.42,(_f(100) => _f(101));
  _f(1) & AssertionLemmas.41,(_f(98) => _f(99));
  _f(1) & AssertionLemmas.40,(_f(33) & _f(96) => _f(97));
  _f(1) & AssertionLemmas.39,(_f(93) & _f(94) => _f(95));
  _f(1) & AssertionLemmas.38,(_f(90) & _f(91) => _f(92));
  _f(1) & AssertionLemmas.37,(_f(24) & _f(88) => _f(89));
  _f(1) & AssertionLemmas.36,(_f(44) & _f(86) => _f(87));
  _f(1) & AssertionLemmas.35,(_f(44) & _f(84) => _f(85));
  _f(1) & AssertionLemmas.34,(_f(82) => _f(83));
  _f(1) & AssertionLemmas.33,(_f(80) => _f(81));
  _f(1) & AssertionLemmas.32,(_f(78) => _f(79));
  _f(1) & AssertionLemmas.31,(_f(76) => _f(77));
  _f(1) & AssertionLemmas.30,(_f(74) => _f(75));
  _f(1) & AssertionLemmas.29,(_f(33) & _f(72) => _f(73));
  _f(1) & AssertionLemmas.28,(_f(69) & _f(70) => _f(71));
  _f(1) & AssertionLemmas.27,(_f(66) & _f(67) => _f(68));
  _f(1) & AssertionLemmas.26,(_f(63) & _f(64) => _f(65));
  _f(1) & AssertionLemmas.25,(_f(60) & _f(61) => _f(62));
  _f(1) & AssertionLemmas.24,(_f(24) & _f(58) => _f(59));
  _f(1) & AssertionLemmas.23,(_f(53) & _f(56) => _f(57));
  _f(1) & AssertionLemmas.22,(_f(53) & _f(54) => _f(55));
  _f(1) & AssertionLemmas.21,(_f(44) & _f(51) => _f(52));
  _f(1) & AssertionLemmas.20,(_f(44) & _f(49) => _f(50));
  _f(1) & AssertionLemmas.19,(_f(44) & _f(47) => _f(48));
  _f(1) & AssertionLemmas.18,(_f(44) & _f(45) => _f(46));
  _f(1) & AssertionLemmas.17,(_f(42) => _f(43));
  _f(1) & AssertionLemmas.16,(_f(40) => _f(41));
  _f(1) & AssertionLemmas.15,(_f(38) => _f(39));
  _f(1) & AssertionLemmas.14,(_f(36) => _f(37));
  _f(1) & AssertionLemmas.13,(_f(33) & _f(34) => _f(35));
  _f(1) & AssertionLemmas.12,(_f(30) & _f(31) => _f(32));
  _f(1) & AssertionLemmas.11,(_f(27) & _f(28) => _f(29));
  _f(1) & AssertionLemmas.10,(_f(24) & _f(25) => _f(26));
  _f(1) & AssertionLemmas.9,(_f(21) & _f(22) => _f(23));
  _f(1) & AssertionLemmas.8,(_f(8) & _f(19) => _f(20));
  _f(1) & AssertionLemmas.7,(_f(17) => _f(18));
  _f(1) & AssertionLemmas.6,(_f(15) => _f(16));
  _f(1) & AssertionLemmas.5,(_f(13) => _f(14));
  _f(1) & AssertionLemmas.4,(_f(11) => _f(12));
  _f(1) & AssertionLemmas.3,(_f(8) & _f(9) => _f(10));
  _f(1) & AssertionLemmas.2,(_f(5) & _f(6) => _f(7));
  _f(1) & AssertionLemmas.1,(_f(2) & _f(3) => _f(4))
END
&
THEORY Formulas IS
  ("`Component properties'" & BIT = {0}\/{1} & bit_not: BIT +-> BIT & bit_not~: BIT +-> BIT & dom(bit_not) = BIT & ran(bit_not) = BIT & bit_not = {0|->1}\/{1|->0} & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & bit_and = {(0,0)|->0}\/{(0,1)|->0}\/{(1,0)|->0}\/{(1,1)|->1} & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & bit_or = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->1} & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & bit_xor = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->0} & bool_bit = {TRUE|->1}\/{FALSE|->0});
  ("`Local hypotheses'" & bb: BIT & not(bb = 1));
  "`Check assertion (!bb.(bb: BIT & not(bb = 1) => bb = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (bb = 0);
  ("`Local hypotheses'" & bb: BIT & not(bb = 0));
  "`Check assertion (!bb.(bb: BIT & not(bb = 0) => bb = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bb = 1);
  ("`Local hypotheses'" & bb: BIT);
  "`Check assertion (!bb.(bb: BIT => bb = 0 or bb = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bb = 0 or bb = 1);
  "`Check assertion (bool_bit(FALSE) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bool_bit(FALSE) = 0);
  "`Check assertion (bool_bit(TRUE) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bool_bit(TRUE) = 1);
  "`Check assertion (ran(bit_xor) = BIT) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bit_xor) = BIT);
  "`Check assertion (dom(bool_bit) = BOOL) deduction - ref 3.2, 4.2, 5.3'";
  (dom(bool_bit) = BOOL);
  "`Check assertion (!bb.(bb: BIT => bit_xor(bb,bb) = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(bb,bb) = 0);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1);
  "`Check assertion (!(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3));
  ("`Local hypotheses'" & b1: BIT & b2: BIT & b3: BIT);
  "`Check assertion (!(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3));
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_xor(b1,b2) = 0);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(b2,b1) = 0);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_xor(b1,b2) = 1);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(b2,b1) = 1);
  ("`Local hypotheses'" & b1: BIT & b2: BIT);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(b1,b2) = bit_xor(b2,b1));
  "`Check assertion (bit_xor(1,1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(1,1) = 0);
  "`Check assertion (bit_xor(1,0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(1,0) = 1);
  "`Check assertion (bit_xor(0,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(0,1) = 1);
  "`Check assertion (bit_xor(0,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_xor(0,0) = 0);
  ("`Local hypotheses'" & b1: BIT);
  "`Check assertion (!b1.(b1: BIT => bit_or(0,b1) = b1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(0,b1) = b1);
  "`Check assertion (!b1.(b1: BIT => bit_or(1,b1) = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(1,b1) = 1);
  "`Check assertion (!b1.(b1: BIT => bit_or(b1,0) = b1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b1,0) = b1);
  "`Check assertion (!b1.(b1: BIT => bit_or(b1,1) = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b1,1) = 1);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1);
  "`Check assertion (!(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3));
  "`Check assertion (!(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b1,bit_or(b2,b3)) = 1);
  "`Check assertion (!(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3));
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_or(b1,0) = 0);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (b1 = 0);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_or(b1,0) = 1);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (b1 = 1);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_or(b1,b2) = 0);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b2,b1) = 0);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_or(b1,b2) = 1);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b2,b1) = 1);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(b1,b2) = bit_or(b2,b1));
  "`Check assertion (bit_or(1,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(1,1) = 1);
  "`Check assertion (bit_or(1,0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(1,0) = 1);
  "`Check assertion (bit_or(0,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(0,1) = 1);
  "`Check assertion (bit_or(0,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_or(0,0) = 0);
  "`Check assertion (ran(bit_or) = BIT) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bit_or) = BIT);
  "`Check assertion (!b1.(b1: BIT => bit_and(b1,0) = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(b1,0) = 0);
  "`Check assertion (!b1.(b1: BIT => bit_and(b1,1) = b1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(b1,1) = b1);
  "`Check assertion (!(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3));
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_and(b1,b2) = 0);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(b2,b1) = 0);
  ("`Local hypotheses'" & b1: BIT & b2: BIT & bit_and(b1,b2) = 1);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(b2,b1) = 1);
  "`Check assertion (!(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1))) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(b1,b2) = bit_and(b2,b1));
  "`Check assertion (bit_and(1,1) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(1,1) = 1);
  "`Check assertion (bit_and(1,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(1,0) = 0);
  "`Check assertion (bit_and(0,1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(0,1) = 0);
  "`Check assertion (bit_and(0,0) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_and(0,0) = 0);
  "`Check assertion (ran(bit_and) = BIT) deduction - ref 3.2, 4.2, 5.3'";
  (ran(bit_and) = BIT);
  "`Check assertion (!bb.(bb: BIT => bit_not(bit_not(bb)) = bb)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_not(bit_not(bb)) = bb);
  "`Check assertion (bit_not(1) = 0) deduction - ref 3.2, 4.2, 5.3'";
  (bit_not(1) = 0);
  "`Check assertion (bit_not(0) = 1) deduction - ref 3.2, 4.2, 5.3'";
  (bit_not(0) = 1);
  "`Check assertion (!bb.(bb: BIT => bit_not(bb) = 1-bb)) deduction - ref 3.2, 4.2, 5.3'";
  (bit_not(bb) = 1-bb);
  ("`Component assertions'" & !bb.(bb: BIT => bit_not(bb) = 1-bb) & dom(bit_and) = BIT*BIT & ran(bit_not) = BIT & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & ran(bit_and) = BIT & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & dom(bit_or) = BIT*BIT & ran(bit_or) = BIT & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & dom(bit_xor) = BIT*BIT & ran(bit_xor) = BIT & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & dom(bool_bit) = BOOL & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0))
END
&
THEORY EnumerateX 
END
&
THEORY Version IS
  POVersion("V4.0-7792")(CLT == "V4.0-9385")(genOPO == KO, genDivergencePO == KO, local_op == OK)
END
