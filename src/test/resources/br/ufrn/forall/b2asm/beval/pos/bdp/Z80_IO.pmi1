THEORY BalanceX IS
  Z80_IO,112,16,0,70,1,0,0;
  InstanciatedConstraintsLemmas,0,0,0,0,0,0,0;
  AssertionLemmas,61,1,0,49,1,0,0;
  Initialisation,5,1,0,2,0,0,0;
  ext_update_io_ports,2,0,0,2,0,0,0;
  IN_A_9n0,2,0,0,2,0,0,0;
  IN_r_9C0,2,1,0,0,0,0,0;
  INI,2,1,0,0,0,0,0;
  INIR,4,2,0,0,0,0,0;
  IND,2,1,0,0,0,0,0;
  INDR,4,2,0,0,0,0,0;
  OUT_9n0_A,2,0,0,2,0,0,0;
  OUT_9C0_r,2,0,0,2,0,0,0;
  OUTI,4,2,0,1,0,0,0;
  OUTIR,8,2,0,4,0,0,0;
  OUTD,4,1,0,2,0,0,0;
  OUTDR,8,2,0,4,0,0,0
END
&
THEORY ProofState IS
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(Util);
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved;
  Proved(Util);
  Unproved;
  Proved(Util);
  Unproved;
  Proved(Util);
  Unproved;
  Proved(Util);
  Unproved;
  Proved(Util);
  Unproved;
  Proved(Util);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Unproved;
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(Util);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(1);
  Proved(0);
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Proved(0);
  Unproved;
  Proved(0);
  Proved(0);
  Proved(Util);
  Unproved
END
&
THEORY MethodList IS
  pr;
  pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  pr;
  pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  pr;
  pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  pr;
  pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  pr;
  pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  pr;
  dd & ah(rgs8(c0): BYTE & mem(byte_bv16(rgs8(h0),rgs8(l0))): BYTE) & ss & pr & ss & pr & pp(rt.0);
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  pr;
  pr;
  pr;
  pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  ?;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(h0,hvn,l0,lvn,b0,dec(rgs8(b0)),f0,[carry,add_sub,pv,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & zz: id_reg_8 & zzr: BYTE & vv: id_reg_8 & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}: id_reg_8 +-> BYTE & (dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}) = id_reg_8 & dom(rgs8<+{xx|->xxr,yy|->yyr,zz|->zzr,vv|->vvr}) = id_reg_8))) & ss & pr & pr & ss & pr & pr & ss & pr & ss & pr & ss & pr & ar(BIT_VECTOR) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr;
  dd & ss & eh(dom(rgs8),_h,Goal) & eh(update_flag_reg,_h,Goal) & ss & pr;
  dd & eh(update_flag_reg,_h,Goal) & ss & ph(rr,io_ports(rgs8(c0)),f0,[carry,add_sub,pv,1,half_carry,1,zero,negative],!(xx,xxr,yy,yyr).(xx: id_reg_8 & xxr: BYTE & yy: id_reg_8 & yyr: BYTE & not(xx = yy) => rgs8<+{xx|->xxr,yy|->yyr}: id_reg_8 +-> BYTE & (dom(rgs8)\/{xx,yy} = id_reg_8 & dom(rgs8)\/{xx,yy} = id_reg_8))) & pr & pr & ss & pr & ar(BIT_VECTOR.1,Once) & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & ss & pr & pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  ?;
  ?;
  ?;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  ?;
  eh(update_flag_reg,_h,Goal) & dd & ss & ar(BIT_VECTOR.1,Once) & pr & pr & pr & pr & pr & pr & pr & pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pp(rt.0);
  pr;
  pr;
  pr;
  pr;
  pr;
  dd & pr(Tac(Update_flag));
  pr;
  dd & pr(Tac(Update_flag));
  pr;
  dd & pr(Tac(Update_flag));
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  pr;
  ?;
  pr;
  pr;
  dd & eh(id_reg_8,_h,Goal) & pr;
  ?
END
&
THEORY PassList IS
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(1),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?;
  Force(0),?
END
&
THEORY ManForms 
END
&
THEORY Version IS
  POVersion(V3.8.3)(CLT == "V3.7.6")(genOPO == KO,genDivergencePO == KO,local_op == OK);
  PRVersion("V3.3.3.p39")(CLT == "V3.7.6");
  PRVersion("svn")(CLT == "V4.0-9385")
END
