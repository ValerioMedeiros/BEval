
THEORY ProofList IS
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RST_pPrecondition.2,(_f(1958) => _f(1959));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RST_pPrecondition.1,(_f(1956) => _f(1957));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.11,(_f(1954) => _f(1955));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.10,(_f(1952) => _f(1953));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.9,(_f(1950) => _f(1951));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.8,(_f(1948) => _f(1949));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.7,(_f(1946) => _f(1947));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.6,(_f(1944) => _f(1945));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.5,(_f(1942) => _f(1943));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.4,(_f(1940) => _f(1941));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.3,(_f(1938) => _f(1939));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.2,(_f(1936) => _f(1937));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1933) & RST_pSubstitution.1,(_f(1934) => _f(1935));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1919) & RETNSubstitution.6,(_f(1930) => _f(1931));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1919) & RETNSubstitution.5,(_f(1928) => _f(1929));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1919) & RETNSubstitution.4,(_f(1926) => _f(1927));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1919) & RETNSubstitution.3,(_f(1924) => _f(1925));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1919) & RETNSubstitution.2,(_f(1922) => _f(1923));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1919) & RETNSubstitution.1,(_f(1920) => _f(1921));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1905) & RETISubstitution.6,(_f(1916) => _f(1917));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1905) & RETISubstitution.5,(_f(1914) => _f(1915));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1905) & RETISubstitution.4,(_f(1912) => _f(1913));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1905) & RETISubstitution.3,(_f(1910) => _f(1911));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1905) & RETISubstitution.2,(_f(1908) => _f(1909));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1905) & RETISubstitution.1,(_f(1906) => _f(1907));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.8,(_f(1902) => _f(1903));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.7,(_f(1900) => _f(1901));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.6,(_f(1898) => _f(1899));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.5,(_f(1896) => _f(1897));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.4,(_f(1894) => _f(1895));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.3,(_f(1892) => _f(1893));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.2,(_f(1890) => _f(1891));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1887) & RET_ccSubstitution.1,(_f(1888) => _f(1889));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1873) & RETSubstitution.6,(_f(1884) => _f(1885));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1873) & RETSubstitution.5,(_f(1882) => _f(1883));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1873) & RETSubstitution.4,(_f(1880) => _f(1881));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1873) & RETSubstitution.3,(_f(1878) => _f(1879));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1873) & RETSubstitution.2,(_f(1876) => _f(1877));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1873) & RETSubstitution.1,(_f(1874) => _f(1875));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & CALL_cc_nnPrecondition.2,(_f(1870) => _f(1871));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & CALL_cc_nnPrecondition.1,(_f(1868) => _f(1869));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.13,(_f(1866) => _f(1867));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.12,(_f(1864) => _f(1865));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.11,(_f(1862) => _f(1863));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.10,(_f(1860) => _f(1861));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.9,(_f(1858) => _f(1859));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.8,(_f(1856) => _f(1857));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.7,(_f(1854) => _f(1855));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.6,(_f(1852) => _f(1853));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.5,(_f(1850) => _f(1851));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.4,(_f(1848) => _f(1849));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.3,(_f(1846) => _f(1847));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.2,(_f(1844) => _f(1845));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1841) & CALL_cc_nnSubstitution.1,(_f(1842) => _f(1843));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & CALL_nnPrecondition.2,(_f(1838) => _f(1839));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & CALL_nnPrecondition.1,(_f(1836) => _f(1837));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.15,(_f(1834) => _f(1835));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.14,(_f(1832) => _f(1833));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.13,(_f(1830) => _f(1831));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.12,(_f(1828) => _f(1829));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.11,(_f(1826) => _f(1827));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.10,(_f(1824) => _f(1825));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.9,(_f(1822) => _f(1823));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.8,(_f(1820) => _f(1821));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.7,(_f(1818) => _f(1819));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.6,(_f(1816) => _f(1817));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.5,(_f(1814) => _f(1815));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.4,(_f(1812) => _f(1813));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.3,(_f(1810) => _f(1811));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.2,(_f(1808) => _f(1809));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1805) & CALL_nnSubstitution.1,(_f(1806) => _f(1807));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1791) & DJNZ_eSubstitution.6,(_f(1802) => _f(1803));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1791) & DJNZ_eSubstitution.5,(_f(1800) => _f(1801));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1791) & DJNZ_eSubstitution.4,(_f(1798) => _f(1799));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1791) & DJNZ_eSubstitution.3,(_f(1796) => _f(1797));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1791) & DJNZ_eSubstitution.2,(_f(1794) => _f(1795));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1791) & DJNZ_eSubstitution.1,(_f(1792) => _f(1793));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1779) & JP_HLSubstitution.3,(_f(1784) => _f(1785));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1779) & JP_HLSubstitution.2,(_f(1782) => _f(1783));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1779) & JP_HLSubstitution.1,(_f(1780) => _f(1781));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1769) & JR_NZ_eSubstitution.4,(_f(1776) => _f(1777));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1769) & JR_NZ_eSubstitution.3,(_f(1774) => _f(1775));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1769) & JR_NZ_eSubstitution.2,(_f(1772) => _f(1773));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1769) & JR_NZ_eSubstitution.1,(_f(1770) => _f(1771));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1759) & JR_Z_eSubstitution.4,(_f(1766) => _f(1767));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1759) & JR_Z_eSubstitution.3,(_f(1764) => _f(1765));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1759) & JR_Z_eSubstitution.2,(_f(1762) => _f(1763));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1759) & JR_Z_eSubstitution.1,(_f(1760) => _f(1761));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1749) & JR_NC_eSubstitution.4,(_f(1756) => _f(1757));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1749) & JR_NC_eSubstitution.3,(_f(1754) => _f(1755));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1749) & JR_NC_eSubstitution.2,(_f(1752) => _f(1753));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1749) & JR_NC_eSubstitution.1,(_f(1750) => _f(1751));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1739) & JR_C_eSubstitution.4,(_f(1746) => _f(1747));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1739) & JR_C_eSubstitution.3,(_f(1744) => _f(1745));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1739) & JR_C_eSubstitution.2,(_f(1742) => _f(1743));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1739) & JR_C_eSubstitution.1,(_f(1740) => _f(1741));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.18,(_f(1734) => _f(1735));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.17,(_f(1732) => _f(1733));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.16,(_f(1730) => _f(1731));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.15,(_f(1728) => _f(1729));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.14,(_f(1726) => _f(1727));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.13,(_f(1724) => _f(1725));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.12,(_f(1722) => _f(1723));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.11,(_f(1720) => _f(1721));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.10,(_f(1718) => _f(1719));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.9,(_f(1716) => _f(1717));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.8,(_f(1714) => _f(1715));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.7,(_f(1712) => _f(1713));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.6,(_f(1710) => _f(1711));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.5,(_f(1708) => _f(1709));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.4,(_f(1706) => _f(1707));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.3,(_f(1704) => _f(1705));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.2,(_f(1702) => _f(1703));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1699) & JP_cc_nnSubstitution.1,(_f(1700) => _f(1701));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RES_b_9IY_d0Precondition.1,(_f(1694) => _f(1695));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.10,(_f(1692) => _f(1693));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.9,(_f(1690) => _f(1691));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.8,(_f(1688) => _f(1689));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.7,(_f(1686) => _f(1687));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.6,(_f(1684) => _f(1685));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.5,(_f(1682) => _f(1683));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.4,(_f(1680) => _f(1681));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.3,(_f(1678) => _f(1679));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.2,(_f(1676) => _f(1677));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1673) & RES_b_9IY_d0Substitution.1,(_f(1674) => _f(1675));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RES_b_9IX_d0Precondition.1,(_f(1670) => _f(1671));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.10,(_f(1668) => _f(1669));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.9,(_f(1666) => _f(1667));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.8,(_f(1664) => _f(1665));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.7,(_f(1662) => _f(1663));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.6,(_f(1660) => _f(1661));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.5,(_f(1658) => _f(1659));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.4,(_f(1656) => _f(1657));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.3,(_f(1654) => _f(1655));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.2,(_f(1652) => _f(1653));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1649) & RES_b_9IX_d0Substitution.1,(_f(1650) => _f(1651));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RES_b_9HL0Precondition.3,(_f(1646) => _f(1647));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RES_b_9HL0Precondition.2,(_f(1644) => _f(1645));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RES_b_9HL0Precondition.1,(_f(1642) => _f(1643));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.14,(_f(1640) => _f(1641));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.13,(_f(1638) => _f(1639));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.12,(_f(1636) => _f(1637));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.11,(_f(1634) => _f(1635));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.10,(_f(1632) => _f(1633));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.9,(_f(1630) => _f(1631));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.8,(_f(1628) => _f(1629));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.7,(_f(1626) => _f(1627));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.6,(_f(1624) => _f(1625));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.5,(_f(1622) => _f(1623));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.4,(_f(1620) => _f(1621));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.3,(_f(1618) => _f(1619));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.2,(_f(1616) => _f(1617));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1613) & RES_b_9HL0Substitution.1,(_f(1614) => _f(1615));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1609) & RES_b_rSubstitution.1,(_f(1610) => _f(1611));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SET_b_9IY_d0Precondition.1,(_f(1606) => _f(1607));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.10,(_f(1604) => _f(1605));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.9,(_f(1602) => _f(1603));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.8,(_f(1600) => _f(1601));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.7,(_f(1598) => _f(1599));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.6,(_f(1596) => _f(1597));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.5,(_f(1594) => _f(1595));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.4,(_f(1592) => _f(1593));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.3,(_f(1590) => _f(1591));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.2,(_f(1588) => _f(1589));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1585) & SET_b_9IY_d0Substitution.1,(_f(1586) => _f(1587));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SET_b_9IX_d0Precondition.1,(_f(1582) => _f(1583));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.10,(_f(1580) => _f(1581));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.9,(_f(1578) => _f(1579));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.8,(_f(1576) => _f(1577));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.7,(_f(1574) => _f(1575));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.6,(_f(1572) => _f(1573));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.5,(_f(1570) => _f(1571));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.4,(_f(1568) => _f(1569));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.3,(_f(1566) => _f(1567));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.2,(_f(1564) => _f(1565));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1561) & SET_b_9IX_d0Substitution.1,(_f(1562) => _f(1563));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SET_b_9HL0Precondition.3,(_f(1558) => _f(1559));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SET_b_9HL0Precondition.2,(_f(1556) => _f(1557));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SET_b_9HL0Precondition.1,(_f(1554) => _f(1555));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.14,(_f(1552) => _f(1553));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.13,(_f(1550) => _f(1551));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.12,(_f(1548) => _f(1549));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.11,(_f(1546) => _f(1547));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.10,(_f(1544) => _f(1545));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.9,(_f(1542) => _f(1543));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.8,(_f(1540) => _f(1541));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.7,(_f(1538) => _f(1539));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.6,(_f(1536) => _f(1537));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.5,(_f(1534) => _f(1535));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.4,(_f(1532) => _f(1533));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.3,(_f(1530) => _f(1531));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.2,(_f(1528) => _f(1529));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1525) & SET_b_9HL0Substitution.1,(_f(1526) => _f(1527));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1521) & SET_b_rSubstitution.1,(_f(1522) => _f(1523));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.13,(_f(1518) => _f(1519));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.12,(_f(1516) => _f(1517));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.11,(_f(1514) => _f(1515));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.10,(_f(1512) => _f(1513));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.9,(_f(1510) => _f(1511));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.8,(_f(1508) => _f(1509));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.7,(_f(1506) => _f(1507));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.6,(_f(1504) => _f(1505));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.5,(_f(1502) => _f(1503));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.4,(_f(1500) => _f(1501));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.3,(_f(1498) => _f(1499));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.2,(_f(1496) => _f(1497));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1493) & BIT_b_9IY_d0Substitution.1,(_f(1494) => _f(1495));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.13,(_f(1490) => _f(1491));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.12,(_f(1488) => _f(1489));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.11,(_f(1486) => _f(1487));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.10,(_f(1484) => _f(1485));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.9,(_f(1482) => _f(1483));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.8,(_f(1480) => _f(1481));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.7,(_f(1478) => _f(1479));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.6,(_f(1476) => _f(1477));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.5,(_f(1474) => _f(1475));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.4,(_f(1472) => _f(1473));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.3,(_f(1470) => _f(1471));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.2,(_f(1468) => _f(1469));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1465) & BIT_b_9IX_d0Substitution.1,(_f(1466) => _f(1467));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.13,(_f(1462) => _f(1463));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.12,(_f(1460) => _f(1461));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.11,(_f(1458) => _f(1459));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.10,(_f(1456) => _f(1457));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.9,(_f(1454) => _f(1455));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.8,(_f(1452) => _f(1453));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.7,(_f(1450) => _f(1451));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.6,(_f(1448) => _f(1449));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.5,(_f(1446) => _f(1447));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.4,(_f(1444) => _f(1445));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.3,(_f(1442) => _f(1443));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.2,(_f(1440) => _f(1441));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1437) & BIT_b_9HL0Substitution.1,(_f(1438) => _f(1439));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.10,(_f(1434) => _f(1435));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.9,(_f(1432) => _f(1433));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.8,(_f(1430) => _f(1431));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.7,(_f(1428) => _f(1429));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.6,(_f(1426) => _f(1427));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.5,(_f(1424) => _f(1425));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.4,(_f(1422) => _f(1423));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.3,(_f(1420) => _f(1421));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.2,(_f(1418) => _f(1419));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1415) & BIT_b_rrSubstitution.1,(_f(1416) => _f(1417));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRDPrecondition.3,(_f(1412) => _f(1413));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRDPrecondition.2,(_f(1410) => _f(1411));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRDPrecondition.1,(_f(1408) => _f(1409));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.51,(_f(1406) => _f(1407));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.50,(_f(1404) => _f(1405));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.49,(_f(1402) => _f(1403));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.48,(_f(1400) => _f(1401));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.47,(_f(1398) => _f(1399));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.46,(_f(1396) => _f(1397));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.45,(_f(1394) => _f(1395));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.44,(_f(1392) => _f(1393));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.43,(_f(1390) => _f(1391));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.42,(_f(1388) => _f(1389));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.41,(_f(1386) => _f(1387));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.40,(_f(1384) => _f(1385));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.39,(_f(1382) => _f(1383));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.38,(_f(1380) => _f(1381));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.37,(_f(1378) => _f(1379));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.36,(_f(1376) => _f(1377));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.35,(_f(1374) => _f(1375));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.34,(_f(1372) => _f(1373));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.33,(_f(1370) => _f(1371));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.32,(_f(1368) => _f(1369));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.31,(_f(1366) => _f(1367));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.30,(_f(1364) => _f(1365));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.29,(_f(1362) => _f(1363));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.28,(_f(1360) => _f(1361));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.27,(_f(1358) => _f(1359));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.26,(_f(1356) => _f(1357));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.25,(_f(1354) => _f(1355));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.24,(_f(1352) => _f(1353));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.23,(_f(1350) => _f(1351));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.22,(_f(1348) => _f(1349));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.21,(_f(1346) => _f(1347));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.20,(_f(1344) => _f(1345));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.19,(_f(1342) => _f(1343));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.18,(_f(1340) => _f(1341));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.17,(_f(1338) => _f(1339));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.16,(_f(1336) => _f(1337));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.15,(_f(1334) => _f(1335));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.14,(_f(1332) => _f(1333));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.13,(_f(1330) => _f(1331));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.12,(_f(1328) => _f(1329));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.11,(_f(1326) => _f(1327));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.10,(_f(1324) => _f(1325));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.9,(_f(1322) => _f(1323));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.8,(_f(1320) => _f(1321));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.7,(_f(1318) => _f(1319));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.6,(_f(1316) => _f(1317));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.5,(_f(1314) => _f(1315));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.4,(_f(1312) => _f(1313));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.3,(_f(1310) => _f(1311));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.2,(_f(1308) => _f(1309));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1305) & RRDSubstitution.1,(_f(1306) => _f(1307));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLDPrecondition.3,(_f(1302) => _f(1303));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLDPrecondition.2,(_f(1300) => _f(1301));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLDPrecondition.1,(_f(1298) => _f(1299));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.51,(_f(1296) => _f(1297));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.50,(_f(1294) => _f(1295));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.49,(_f(1292) => _f(1293));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.48,(_f(1290) => _f(1291));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.47,(_f(1288) => _f(1289));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.46,(_f(1286) => _f(1287));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.45,(_f(1284) => _f(1285));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.44,(_f(1282) => _f(1283));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.43,(_f(1280) => _f(1281));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.42,(_f(1278) => _f(1279));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.41,(_f(1276) => _f(1277));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.40,(_f(1274) => _f(1275));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.39,(_f(1272) => _f(1273));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.38,(_f(1270) => _f(1271));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.37,(_f(1268) => _f(1269));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.36,(_f(1266) => _f(1267));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.35,(_f(1264) => _f(1265));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.34,(_f(1262) => _f(1263));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.33,(_f(1260) => _f(1261));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.32,(_f(1258) => _f(1259));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.31,(_f(1256) => _f(1257));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.30,(_f(1254) => _f(1255));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.29,(_f(1252) => _f(1253));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.28,(_f(1250) => _f(1251));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.27,(_f(1248) => _f(1249));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.26,(_f(1246) => _f(1247));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.25,(_f(1244) => _f(1245));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.24,(_f(1242) => _f(1243));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.23,(_f(1240) => _f(1241));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.22,(_f(1238) => _f(1239));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.21,(_f(1236) => _f(1237));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.20,(_f(1234) => _f(1235));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.19,(_f(1232) => _f(1233));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.18,(_f(1230) => _f(1231));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.17,(_f(1228) => _f(1229));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.16,(_f(1226) => _f(1227));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.15,(_f(1224) => _f(1225));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.14,(_f(1222) => _f(1223));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.13,(_f(1220) => _f(1221));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.12,(_f(1218) => _f(1219));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.11,(_f(1216) => _f(1217));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.10,(_f(1214) => _f(1215));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.9,(_f(1212) => _f(1213));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.8,(_f(1210) => _f(1211));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.7,(_f(1208) => _f(1209));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.6,(_f(1206) => _f(1207));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.5,(_f(1204) => _f(1205));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.4,(_f(1202) => _f(1203));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.3,(_f(1200) => _f(1201));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.2,(_f(1198) => _f(1199));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1195) & RLDSubstitution.1,(_f(1196) => _f(1197));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRL_9IY_d0Precondition.1,(_f(1192) => _f(1193));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.14,(_f(1190) => _f(1191));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.13,(_f(1188) => _f(1189));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.12,(_f(1186) => _f(1187));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.11,(_f(1184) => _f(1185));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.10,(_f(1182) => _f(1183));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.9,(_f(1180) => _f(1181));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.8,(_f(1178) => _f(1179));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.7,(_f(1176) => _f(1177));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.6,(_f(1174) => _f(1175));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.5,(_f(1172) => _f(1173));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.4,(_f(1170) => _f(1171));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.3,(_f(1168) => _f(1169));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.2,(_f(1166) => _f(1167));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1163) & SRL_9IY_d0Substitution.1,(_f(1164) => _f(1165));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRL_9IX_d0Precondition.1,(_f(1160) => _f(1161));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.14,(_f(1158) => _f(1159));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.13,(_f(1156) => _f(1157));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.12,(_f(1154) => _f(1155));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.11,(_f(1152) => _f(1153));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.10,(_f(1150) => _f(1151));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.9,(_f(1148) => _f(1149));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.8,(_f(1146) => _f(1147));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.7,(_f(1144) => _f(1145));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.6,(_f(1142) => _f(1143));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.5,(_f(1140) => _f(1141));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.4,(_f(1138) => _f(1139));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.3,(_f(1136) => _f(1137));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.2,(_f(1134) => _f(1135));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1131) & SRL_9IX_d0Substitution.1,(_f(1132) => _f(1133));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRL_9HL0Precondition.3,(_f(1128) => _f(1129));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRL_9HL0Precondition.2,(_f(1126) => _f(1127));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRL_9HL0Precondition.1,(_f(1124) => _f(1125));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.16,(_f(1122) => _f(1123));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.15,(_f(1120) => _f(1121));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.14,(_f(1118) => _f(1119));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.13,(_f(1116) => _f(1117));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.12,(_f(1114) => _f(1115));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.11,(_f(1112) => _f(1113));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.10,(_f(1110) => _f(1111));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.9,(_f(1108) => _f(1109));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.8,(_f(1106) => _f(1107));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.7,(_f(1104) => _f(1105));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.6,(_f(1102) => _f(1103));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.5,(_f(1100) => _f(1101));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.4,(_f(1098) => _f(1099));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.3,(_f(1096) => _f(1097));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.2,(_f(1094) => _f(1095));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1091) & SRL_9HL0Substitution.1,(_f(1092) => _f(1093));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1079) & SRL_rSubstitution.5,(_f(1088) => _f(1089));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1079) & SRL_rSubstitution.4,(_f(1086) => _f(1087));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1079) & SRL_rSubstitution.3,(_f(1084) => _f(1085));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1079) & SRL_rSubstitution.2,(_f(1082) => _f(1083));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1079) & SRL_rSubstitution.1,(_f(1080) => _f(1081));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRA_9IY_d0Precondition.1,(_f(1076) => _f(1077));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.18,(_f(1074) => _f(1075));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.17,(_f(1072) => _f(1073));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.16,(_f(1070) => _f(1071));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.15,(_f(1068) => _f(1069));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.14,(_f(1066) => _f(1067));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.13,(_f(1064) => _f(1065));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.12,(_f(1062) => _f(1063));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.11,(_f(1060) => _f(1061));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.10,(_f(1058) => _f(1059));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.9,(_f(1056) => _f(1057));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.8,(_f(1054) => _f(1055));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.7,(_f(1052) => _f(1053));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.6,(_f(1050) => _f(1051));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.5,(_f(1048) => _f(1049));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.4,(_f(1046) => _f(1047));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.3,(_f(1044) => _f(1045));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.2,(_f(1042) => _f(1043));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1039) & SRA_9IY_d0Substitution.1,(_f(1040) => _f(1041));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRA_9IX_d0Precondition.1,(_f(1036) => _f(1037));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.17,(_f(1034) => _f(1035));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.16,(_f(1032) => _f(1033));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.15,(_f(1030) => _f(1031));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.14,(_f(1028) => _f(1029));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.13,(_f(1026) => _f(1027));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.12,(_f(1024) => _f(1025));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.11,(_f(1022) => _f(1023));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.10,(_f(1020) => _f(1021));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.9,(_f(1018) => _f(1019));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.8,(_f(1016) => _f(1017));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.7,(_f(1014) => _f(1015));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.6,(_f(1012) => _f(1013));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.5,(_f(1010) => _f(1011));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.4,(_f(1008) => _f(1009));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.3,(_f(1006) => _f(1007));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.2,(_f(1004) => _f(1005));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(1001) & SRA_9IX_d0Substitution.1,(_f(1002) => _f(1003));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRA_9HL0Precondition.3,(_f(998) => _f(999));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRA_9HL0Precondition.2,(_f(996) => _f(997));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SRA_9HL0Precondition.1,(_f(994) => _f(995));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.20,(_f(992) => _f(993));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.19,(_f(990) => _f(991));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.18,(_f(988) => _f(989));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.17,(_f(986) => _f(987));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.16,(_f(984) => _f(985));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.15,(_f(982) => _f(983));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.14,(_f(980) => _f(981));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.13,(_f(978) => _f(979));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.12,(_f(976) => _f(977));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.11,(_f(974) => _f(975));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.10,(_f(972) => _f(973));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.9,(_f(970) => _f(971));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.8,(_f(968) => _f(969));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.7,(_f(966) => _f(967));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.6,(_f(964) => _f(965));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.5,(_f(962) => _f(963));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.4,(_f(960) => _f(961));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.3,(_f(958) => _f(959));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.2,(_f(956) => _f(957));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(953) & SRA_9HL0Substitution.1,(_f(954) => _f(955));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SLA_9HL0Precondition.3,(_f(950) => _f(951));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SLA_9HL0Precondition.2,(_f(948) => _f(949));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & SLA_9HL0Precondition.1,(_f(946) => _f(947));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.17,(_f(944) => _f(945));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.16,(_f(942) => _f(943));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.15,(_f(940) => _f(941));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.14,(_f(938) => _f(939));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.13,(_f(936) => _f(937));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.12,(_f(934) => _f(935));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.11,(_f(932) => _f(933));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.10,(_f(930) => _f(931));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.9,(_f(928) => _f(929));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.8,(_f(926) => _f(927));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.7,(_f(924) => _f(925));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.6,(_f(922) => _f(923));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.5,(_f(920) => _f(921));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.4,(_f(918) => _f(919));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.3,(_f(916) => _f(917));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.2,(_f(914) => _f(915));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(911) & SLA_9HL0Substitution.1,(_f(912) => _f(913));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(897) & SLA_rSubstitution.6,(_f(908) => _f(909));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(897) & SLA_rSubstitution.5,(_f(906) => _f(907));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(897) & SLA_rSubstitution.4,(_f(904) => _f(905));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(897) & SLA_rSubstitution.3,(_f(902) => _f(903));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(897) & SLA_rSubstitution.2,(_f(900) => _f(901));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(897) & SLA_rSubstitution.1,(_f(898) => _f(899));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RR_9IY_d0Precondition.1,(_f(894) => _f(895));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.15,(_f(892) => _f(893));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.14,(_f(890) => _f(891));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.13,(_f(888) => _f(889));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.12,(_f(886) => _f(887));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.11,(_f(884) => _f(885));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.10,(_f(882) => _f(883));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.9,(_f(880) => _f(881));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.8,(_f(878) => _f(879));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.7,(_f(876) => _f(877));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.6,(_f(874) => _f(875));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.5,(_f(872) => _f(873));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.4,(_f(870) => _f(871));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.3,(_f(868) => _f(869));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.2,(_f(866) => _f(867));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(863) & RR_9IY_d0Substitution.1,(_f(864) => _f(865));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RR_9IX_d0Precondition.1,(_f(860) => _f(861));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.15,(_f(858) => _f(859));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.14,(_f(856) => _f(857));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.13,(_f(854) => _f(855));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.12,(_f(852) => _f(853));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.11,(_f(850) => _f(851));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.10,(_f(848) => _f(849));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.9,(_f(846) => _f(847));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.8,(_f(844) => _f(845));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.7,(_f(842) => _f(843));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.6,(_f(840) => _f(841));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.5,(_f(838) => _f(839));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.4,(_f(836) => _f(837));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.3,(_f(834) => _f(835));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.2,(_f(832) => _f(833));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(829) & RR_9IX_d0Substitution.1,(_f(830) => _f(831));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RR_9HLPrecondition.3,(_f(826) => _f(827));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RR_9HLPrecondition.2,(_f(824) => _f(825));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RR_9HLPrecondition.1,(_f(822) => _f(823));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.17,(_f(820) => _f(821));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.16,(_f(818) => _f(819));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.15,(_f(816) => _f(817));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.14,(_f(814) => _f(815));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.13,(_f(812) => _f(813));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.12,(_f(810) => _f(811));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.11,(_f(808) => _f(809));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.10,(_f(806) => _f(807));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.9,(_f(804) => _f(805));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.8,(_f(802) => _f(803));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.7,(_f(800) => _f(801));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.6,(_f(798) => _f(799));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.5,(_f(796) => _f(797));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.4,(_f(794) => _f(795));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.3,(_f(792) => _f(793));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.2,(_f(790) => _f(791));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(787) & RR_9HLSubstitution.1,(_f(788) => _f(789));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(773) & RR_rSubstitution.6,(_f(784) => _f(785));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(773) & RR_rSubstitution.5,(_f(782) => _f(783));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(773) & RR_rSubstitution.4,(_f(780) => _f(781));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(773) & RR_rSubstitution.3,(_f(778) => _f(779));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(773) & RR_rSubstitution.2,(_f(776) => _f(777));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(773) & RR_rSubstitution.1,(_f(774) => _f(775));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRC_9IY_d0Precondition.1,(_f(770) => _f(771));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.13,(_f(768) => _f(769));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.12,(_f(766) => _f(767));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.11,(_f(764) => _f(765));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.10,(_f(762) => _f(763));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.9,(_f(760) => _f(761));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.8,(_f(758) => _f(759));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.7,(_f(756) => _f(757));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.6,(_f(754) => _f(755));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.5,(_f(752) => _f(753));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.4,(_f(750) => _f(751));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.3,(_f(748) => _f(749));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.2,(_f(746) => _f(747));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(743) & RRC_9IY_d0Substitution.1,(_f(744) => _f(745));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRC_9IX_d0Precondition.1,(_f(740) => _f(741));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.13,(_f(738) => _f(739));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.12,(_f(736) => _f(737));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.11,(_f(734) => _f(735));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.10,(_f(732) => _f(733));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.9,(_f(730) => _f(731));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.8,(_f(728) => _f(729));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.7,(_f(726) => _f(727));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.6,(_f(724) => _f(725));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.5,(_f(722) => _f(723));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.4,(_f(720) => _f(721));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.3,(_f(718) => _f(719));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.2,(_f(716) => _f(717));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(713) & RRC_9IX_d0Substitution.1,(_f(714) => _f(715));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRC_9HL0Precondition.3,(_f(710) => _f(711));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRC_9HL0Precondition.2,(_f(708) => _f(709));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RRC_9HL0Precondition.1,(_f(706) => _f(707));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.15,(_f(704) => _f(705));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.14,(_f(702) => _f(703));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.13,(_f(700) => _f(701));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.12,(_f(698) => _f(699));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.11,(_f(696) => _f(697));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.10,(_f(694) => _f(695));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.9,(_f(692) => _f(693));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.8,(_f(690) => _f(691));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.7,(_f(688) => _f(689));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.6,(_f(686) => _f(687));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.5,(_f(684) => _f(685));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.4,(_f(682) => _f(683));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.3,(_f(680) => _f(681));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.2,(_f(678) => _f(679));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(675) & RRC_9HL0Substitution.1,(_f(676) => _f(677));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(665) & RRC_rSubstitution.4,(_f(672) => _f(673));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(665) & RRC_rSubstitution.3,(_f(670) => _f(671));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(665) & RRC_rSubstitution.2,(_f(668) => _f(669));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(665) & RRC_rSubstitution.1,(_f(666) => _f(667));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RL_9IY_d0Precondition.1,(_f(662) => _f(663));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.15,(_f(660) => _f(661));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.14,(_f(658) => _f(659));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.13,(_f(656) => _f(657));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.12,(_f(654) => _f(655));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.11,(_f(652) => _f(653));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.10,(_f(650) => _f(651));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.9,(_f(648) => _f(649));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.8,(_f(646) => _f(647));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.7,(_f(644) => _f(645));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.6,(_f(642) => _f(643));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.5,(_f(640) => _f(641));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.4,(_f(638) => _f(639));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.3,(_f(636) => _f(637));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.2,(_f(634) => _f(635));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(631) & RL_9IY_d0Substitution.1,(_f(632) => _f(633));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RL_9IX_d0Precondition.1,(_f(628) => _f(629));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.15,(_f(626) => _f(627));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.14,(_f(624) => _f(625));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.13,(_f(622) => _f(623));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.12,(_f(620) => _f(621));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.11,(_f(618) => _f(619));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.10,(_f(616) => _f(617));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.9,(_f(614) => _f(615));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.8,(_f(612) => _f(613));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.7,(_f(610) => _f(611));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.6,(_f(608) => _f(609));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.5,(_f(606) => _f(607));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.4,(_f(604) => _f(605));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.3,(_f(602) => _f(603));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.2,(_f(600) => _f(601));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(597) & RL_9IX_d0Substitution.1,(_f(598) => _f(599));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RL_9HLPrecondition.3,(_f(594) => _f(595));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RL_9HLPrecondition.2,(_f(592) => _f(593));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RL_9HLPrecondition.1,(_f(590) => _f(591));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.17,(_f(588) => _f(589));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.16,(_f(586) => _f(587));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.15,(_f(584) => _f(585));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.14,(_f(582) => _f(583));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.13,(_f(580) => _f(581));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.12,(_f(578) => _f(579));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.11,(_f(576) => _f(577));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.10,(_f(574) => _f(575));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.9,(_f(572) => _f(573));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.8,(_f(570) => _f(571));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.7,(_f(568) => _f(569));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.6,(_f(566) => _f(567));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.5,(_f(564) => _f(565));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.4,(_f(562) => _f(563));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.3,(_f(560) => _f(561));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.2,(_f(558) => _f(559));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(555) & RL_9HLSubstitution.1,(_f(556) => _f(557));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(541) & RL_rSubstitution.6,(_f(552) => _f(553));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(541) & RL_rSubstitution.5,(_f(550) => _f(551));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(541) & RL_rSubstitution.4,(_f(548) => _f(549));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(541) & RL_rSubstitution.3,(_f(546) => _f(547));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(541) & RL_rSubstitution.2,(_f(544) => _f(545));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(541) & RL_rSubstitution.1,(_f(542) => _f(543));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9IY_d0Precondition.3,(_f(538) => _f(539));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9IY_d0Precondition.2,(_f(536) => _f(537));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9IY_d0Precondition.1,(_f(534) => _f(535));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.13,(_f(532) => _f(533));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.12,(_f(530) => _f(531));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.11,(_f(528) => _f(529));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.10,(_f(526) => _f(527));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.9,(_f(524) => _f(525));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.8,(_f(522) => _f(523));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.7,(_f(520) => _f(521));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.6,(_f(518) => _f(519));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.5,(_f(516) => _f(517));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.4,(_f(514) => _f(515));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.3,(_f(512) => _f(513));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.2,(_f(510) => _f(511));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(507) & RLC_9IY_d0Substitution.1,(_f(508) => _f(509));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9IX_d0Precondition.3,(_f(504) => _f(505));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9IX_d0Precondition.2,(_f(502) => _f(503));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9IX_d0Precondition.1,(_f(500) => _f(501));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.13,(_f(498) => _f(499));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.12,(_f(496) => _f(497));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.11,(_f(494) => _f(495));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.10,(_f(492) => _f(493));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.9,(_f(490) => _f(491));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.8,(_f(488) => _f(489));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.7,(_f(486) => _f(487));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.6,(_f(484) => _f(485));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.5,(_f(482) => _f(483));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.4,(_f(480) => _f(481));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.3,(_f(478) => _f(479));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.2,(_f(476) => _f(477));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(473) & RLC_9IX_d0Substitution.1,(_f(474) => _f(475));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9HL0Precondition.3,(_f(470) => _f(471));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9HL0Precondition.2,(_f(468) => _f(469));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & RLC_9HL0Precondition.1,(_f(466) => _f(467));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.15,(_f(464) => _f(465));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.14,(_f(462) => _f(463));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.13,(_f(460) => _f(461));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.12,(_f(458) => _f(459));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.11,(_f(456) => _f(457));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.10,(_f(454) => _f(455));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.9,(_f(452) => _f(453));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.8,(_f(450) => _f(451));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.7,(_f(448) => _f(449));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.6,(_f(446) => _f(447));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.5,(_f(444) => _f(445));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.4,(_f(442) => _f(443));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.3,(_f(440) => _f(441));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.2,(_f(438) => _f(439));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(435) & RLC_9HL0Substitution.1,(_f(436) => _f(437));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(425) & RLC_rSubstitution.4,(_f(432) => _f(433));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(425) & RLC_rSubstitution.3,(_f(430) => _f(431));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(425) & RLC_rSubstitution.2,(_f(428) => _f(429));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(425) & RLC_rSubstitution.1,(_f(426) => _f(427));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.14,(_f(422) => _f(423));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.13,(_f(420) => _f(421));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.12,(_f(418) => _f(419));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.11,(_f(416) => _f(417));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.10,(_f(414) => _f(415));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.9,(_f(412) => _f(413));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.8,(_f(410) => _f(411));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.7,(_f(408) => _f(409));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.6,(_f(406) => _f(407));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.5,(_f(404) => _f(405));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.4,(_f(402) => _f(403));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.3,(_f(400) => _f(401));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.2,(_f(398) => _f(399));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(395) & RRASubstitution.1,(_f(396) => _f(397));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.12,(_f(392) => _f(393));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.11,(_f(390) => _f(391));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.10,(_f(388) => _f(389));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.9,(_f(386) => _f(387));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.8,(_f(384) => _f(385));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.7,(_f(382) => _f(383));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.6,(_f(380) => _f(381));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.5,(_f(378) => _f(379));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.4,(_f(376) => _f(377));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.3,(_f(374) => _f(375));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.2,(_f(372) => _f(373));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(369) & RRCASubstitution.1,(_f(370) => _f(371));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.14,(_f(366) => _f(367));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.13,(_f(364) => _f(365));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.12,(_f(362) => _f(363));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.11,(_f(360) => _f(361));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.10,(_f(358) => _f(359));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.9,(_f(356) => _f(357));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.8,(_f(354) => _f(355));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.7,(_f(352) => _f(353));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.6,(_f(350) => _f(351));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.5,(_f(348) => _f(349));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.4,(_f(346) => _f(347));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.3,(_f(344) => _f(345));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.2,(_f(342) => _f(343));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(339) & RLASubstitution.1,(_f(340) => _f(341));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.12,(_f(336) => _f(337));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.11,(_f(334) => _f(335));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.10,(_f(332) => _f(333));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.9,(_f(330) => _f(331));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.8,(_f(328) => _f(329));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.7,(_f(326) => _f(327));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.6,(_f(324) => _f(325));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.5,(_f(322) => _f(323));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.4,(_f(320) => _f(321));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.3,(_f(318) => _f(319));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.2,(_f(316) => _f(317));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & _f(9) & _f(313) & RLCASubstitution.1,(_f(314) => _f(315));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.118,(_f(310) => _f(311));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.117,(_f(308) => _f(309));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.116,(_f(306) => _f(307));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.115,(_f(304) => _f(305));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.114,(_f(302) => _f(303));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.113,(_f(300) => _f(301));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.112,(_f(298) => _f(299));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.111,(_f(296) => _f(297));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.110,(_f(294) => _f(295));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.109,(_f(292) => _f(293));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.108,(_f(290) => _f(291));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.107,(_f(288) => _f(289));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.106,(_f(286) => _f(287));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.105,(_f(284) => _f(285));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.104,(_f(282) => _f(283));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.103,(_f(280) => _f(281));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.102,(_f(278) => _f(279));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.101,(_f(276) => _f(277));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.100,(_f(274) => _f(275));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.99,(_f(272) => _f(273));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.98,(_f(270) => _f(271));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.97,(_f(268) => _f(269));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.96,(_f(266) => _f(267));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.95,(_f(264) => _f(265));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.94,(_f(262) => _f(263));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.93,(_f(260) => _f(261));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.92,(_f(258) => _f(259));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.91,(_f(256) => _f(257));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.90,(_f(254) => _f(255));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.89,(_f(252) => _f(253));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.88,(_f(250) => _f(251));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.87,(_f(248) => _f(249));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.86,(_f(246) => _f(247));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.85,(_f(244) => _f(245));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.84,(_f(242) => _f(243));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.83,(_f(240) => _f(241));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.82,(_f(238) => _f(239));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.81,(_f(236) => _f(237));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.80,(_f(234) => _f(235));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.79,(_f(232) => _f(233));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.78,(_f(230) => _f(231));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.77,(_f(228) => _f(229));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.76,(_f(226) => _f(227));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.75,(_f(224) => _f(225));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.74,(_f(222) => _f(223));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.73,(_f(220) => _f(221));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.72,(_f(218) => _f(219));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.71,(_f(216) => _f(217));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.70,(_f(214) => _f(215));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.69,(_f(212) => _f(213));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.68,(_f(210) => _f(211));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.67,(_f(208) => _f(209));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.66,(_f(206) => _f(207));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.65,(_f(204) => _f(205));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.64,(_f(202) => _f(203));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.63,(_f(200) => _f(201));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.62,(_f(198) => _f(199));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.61,(_f(196) => _f(197));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.60,(_f(194) => _f(195));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.59,(_f(192) => _f(193));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.58,(_f(190) => _f(191));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.57,(_f(188) => _f(189));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.56,(_f(186) => _f(187));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.55,(_f(184) => _f(185));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.54,(_f(182) => _f(183));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.53,(_f(180) => _f(181));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.52,(_f(178) => _f(179));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.51,(_f(176) => _f(177));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.50,(_f(174) => _f(175));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.49,(_f(172) => _f(173));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.48,(_f(170) => _f(171));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.47,(_f(168) => _f(169));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.46,(_f(166) => _f(167));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.45,(_f(164) => _f(165));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.44,(_f(162) => _f(163));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.43,(_f(160) => _f(161));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.42,(_f(158) => _f(159));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.41,(_f(156) => _f(157));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.40,(_f(154) => _f(155));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.39,(_f(152) => _f(153));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.38,(_f(150) => _f(151));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.37,(_f(148) => _f(149));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.36,(_f(146) => _f(147));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.35,(_f(144) => _f(145));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.34,(_f(142) => _f(143));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.33,(_f(140) => _f(141));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.32,(_f(138) => _f(139));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.31,(_f(136) => _f(137));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.30,(_f(134) => _f(135));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.29,(_f(132) => _f(133));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.28,(_f(130) => _f(131));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.27,(_f(128) => _f(129));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.26,(_f(126) => _f(127));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.25,(_f(124) => _f(125));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.24,(_f(122) => _f(123));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.23,(_f(120) => _f(121));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.22,(_f(118) => _f(119));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.21,(_f(116) => _f(117));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.20,(_f(114) => _f(115));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.19,(_f(112) => _f(113));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.18,(_f(110) => _f(111));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.17,(_f(108) => _f(109));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.16,(_f(106) => _f(107));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.15,(_f(104) => _f(105));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.14,(_f(102) => _f(103));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.13,(_f(100) => _f(101));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.12,(_f(98) => _f(99));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.11,(_f(96) => _f(97));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.10,(_f(94) => _f(95));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.9,(_f(92) => _f(93));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.8,(_f(90) => _f(91));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.7,(_f(88) => _f(89));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.6,(_f(86) => _f(87));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.5,(_f(84) => _f(85));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.4,(_f(82) => _f(83));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.3,(_f(80) => _f(81));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.2,(_f(78) => _f(79));
_f(5) & _f(4) & _f(3) & _f(2) & _f(1) & _f(8) & _f(7) & _f(11) & _f(10) & _f(6) & Assertions.1,(_f(76) => _f(77));
_f(5) & _f(4) & Properties.32,(_f(74) => _f(75));
_f(5) & _f(4) & Properties.31,(_f(72) => _f(73));
_f(5) & _f(4) & Properties.30,(_f(70) => _f(71));
_f(5) & _f(4) & Properties.29,(_f(68) => _f(69));
_f(5) & _f(4) & Properties.28,(_f(66) => _f(67));
_f(5) & _f(4) & Properties.27,(_f(64) => _f(65));
_f(5) & _f(4) & Properties.26,(_f(62) => _f(63));
_f(5) & _f(4) & Properties.25,(_f(60) => _f(61));
_f(5) & _f(4) & Properties.24,(_f(58) => _f(59));
_f(5) & _f(4) & Properties.23,(_f(56) => _f(57));
_f(5) & _f(4) & Properties.22,(_f(54) => _f(55));
_f(5) & _f(4) & Properties.21,(_f(52) => _f(53));
_f(5) & _f(4) & Properties.20,(_f(50) => _f(51));
_f(5) & _f(4) & Properties.19,(_f(48) => _f(49));
_f(5) & _f(4) & Properties.18,(_f(46) => _f(47));
_f(5) & _f(4) & Properties.17,(_f(44) => _f(45));
_f(5) & _f(4) & Properties.16,(_f(42) => _f(43));
_f(5) & _f(4) & Properties.15,(_f(40) => _f(41));
_f(5) & _f(4) & Properties.14,(_f(38) => _f(39));
_f(5) & _f(4) & Properties.13,(_f(36) => _f(37));
_f(5) & _f(4) & Properties.12,(_f(34) => _f(35));
_f(5) & _f(4) & Properties.11,(_f(32) => _f(33));
_f(5) & _f(4) & Properties.10,(_f(30) => _f(31));
_f(5) & _f(4) & Properties.9,(_f(28) => _f(29));
_f(5) & _f(4) & Properties.8,(_f(26) => _f(27));
_f(5) & _f(4) & Properties.7,(_f(24) => _f(25));
_f(5) & _f(4) & Properties.6,(_f(22) => _f(23));
_f(5) & _f(4) & Properties.5,(_f(20) => _f(21));
_f(5) & _f(4) & Properties.4,(_f(18) => _f(19));
_f(5) & _f(4) & Properties.3,(_f(16) => _f(17));
_f(5) & _f(4) & Properties.2,(_f(14) => _f(15));
_f(5) & _f(4) & Properties.1,(_f(12) => _f(13))

END
&

THEORY Formulas IS
("`Component constraints'" & btrue);
("`Used machines constraints'" & btrue);
("`Component properties'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & get_bv_reg16 = %(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16 | byte_bv16(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8)))\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16 | byte_bv16(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8)))\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16 | byte_bv16(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8)))\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 4|->id_reg_16 | sp_)\/%(sp_,rgs8_,r1).(sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16 | byte_bv16(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8))));
("`Seen and used machines properties'" & is_zero16USHORT = %nat1.(nat1: USHORT | bool_bit(bool(nat1 = 0))) & is_negative = %w1.(w1: BYTE | w1(7)) & half8UCHAR = %ww.(ww: UCHAR | ww mod 16) & inc = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+1) mod 256)) & dec = %w1.(w1: BYTE | uchar_byte((byte_uchar(w1)+255) mod 256)) & simple_add8UCHAR = %(w1,w2).(w1: UCHAR & w2: UCHAR | (w1+w2) mod 256) & add8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+w2) mod 256,bool_bit(bool(carry+uchar_schar(w1)+uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1+w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)+half8UCHAR(w2))),bool_bit(bool((carry+w1+w2) mod 256 = 0))) & substract8UCHAR = %(carry,w1,w2).(carry: BIT & w1: UCHAR & w2: UCHAR | (carry+w1+(256-w2)) mod 256,bool_bit(bool(carry+uchar_schar(w1)-uchar_schar(w2)+1<=0)),bool_bit(bool(UCHAR_MAX+1<=carry+w1-w2)),bool_bit(bool(16<=carry+half8UCHAR(w1)-half8UCHAR(w2))),bool_bit(bool((carry+w1+(256-w2)) mod 256 = 0))) & add16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+w2) mod 65536) & add_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65536<=b1+w1+w2))) & add_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=b1+w1 mod 4096+w2 mod 4096))) & sub16USHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | (b1+w1+(65536-w2)) mod 65536) & sub_carryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(65537<=w1+w2-b1))) & sub_halfcarryUSHORT = %(b1,w1,w2).(b1: BIT & w1: USHORT & w2: USHORT | bool_bit(bool(4097<=w1 mod 4096+w2 mod 4096-b1))) & inc_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+1) mod 65536)) & dec_BV16 = %w1.(w1: BV16 | ushort_bv16((bv16_ushort(w1)+65536-1) mod 65536)) & update_refresh_reg = %v0.(v0: BYTE | uchar_byte(128*v0(8)+(64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) mod 128)) & instruction_next = %w1.(w1: USHORT | (w1+1) mod 65536) & instruction_jump = %(p0,e0).(p0: USHORT & e0: -126..129 | (p0+e0+65536) mod 65536) & BIT = {0}\/{1} & bit_not: BIT +-> BIT & bit_not~: BIT +-> BIT & dom(bit_not) = BIT & ran(bit_not) = BIT & bit_not = {0|->1}\/{1|->0} & bit_and: BIT*BIT +-> BIT & dom(bit_and) = BIT*BIT & bit_and = {(0,0)|->0}\/{(0,1)|->0}\/{(1,0)|->0}\/{(1,1)|->1} & bit_or: BIT*BIT +-> BIT & dom(bit_or) = BIT*BIT & bit_or = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->1} & bit_xor: BIT*BIT +-> BIT & dom(bit_xor) = BIT*BIT & bit_xor = {(0,0)|->0}\/{(0,1)|->1}\/{(1,0)|->1}\/{(1,1)|->0} & bool_bit = {TRUE|->1}\/{FALSE|->0} & BYTE_INDEX = 1..8 & PHYS_BYTE_INDEX = 0..7 & BYTE = BYTE_INDEX --> BIT & !b1.(b1: BYTE => size(b1) = 8 & b1: seq(BIT) & not(b1 = {})) & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & is_zero = %w1.(w1: BYTE | bool_bit(bool(w1(1) = w1(2) & w1(2) = w1(3) & w1(3) = w1(4) & w1(4) = w1(5) & w1(5) = w1(6) & w1(6) = w1(7) & w1(7) = w1(8) & w1(8) = 0))) & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & parity_even = %bv.(bv: BYTE | 1-(bv(1)+bv(2)+bv(3)+bv(4)+bv(5)+bv(6)+bv(7)+bv(8)) mod 2) & bv8_and = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_and(bt1(idx),bt2(idx)))) & bv8_or = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_or(bt1(idx),bt2(idx)))) & bv8_xor = %(bt1,bt2).(bt1: BYTE & bt2: BYTE | %idx.(idx: 1..8 | bit_xor(bt1(idx),bt2(idx)))) & bv8get: BYTE*PHYS_BYTE_INDEX +-> BIT & dom(bv8get) = BYTE*PHYS_BYTE_INDEX & bv8get = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1(ii+1)) & bitset: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitset) = BYTE*PHYS_BYTE_INDEX & bitset = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1<+{ii+1|->1}) & bitclear: BYTE*PHYS_BYTE_INDEX +-> BYTE & dom(bitclear) = BYTE*PHYS_BYTE_INDEX & bitclear = %(bt1,ii).(bt1: BYTE & ii: PHYS_BYTE_INDEX | bt1<+{ii+1|->0}) & complement: BYTE +-> BYTE & dom(complement) = BYTE & complement = %bt.(bt: BYTE | %idx.(idx: 1..8 | bit_not(bt(idx)))) & swap: BYTE +-> BYTE & dom(swap) = BYTE & swap = %bt.(bt: BYTE | {1|->bt(5)}\/{2|->bt(6)}\/{3|->bt(7)}\/{4|->bt(8)}\/{5|->bt(1)}\/{6|->bt(2)}\/{7|->bt(3)}\/{8|->bt(4)}) & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateleft = %bv.(bv: BYTE | {1|->bv(8)}\/{2|->bv(1)}\/{3|->bv(2)}\/{4|->bv(3)}\/{5|->bv(4)}\/{6|->bv(5)}\/{7|->bv(6)}\/{8|->bv(7)}) & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & rotateright = %bv.(bv: BYTE | {1|->bv(2)}\/{2|->bv(3)}\/{3|->bv(4)}\/{4|->bv(5)}\/{5|->bv(6)}\/{6|->bv(7)}\/{7|->bv(8)}\/{8|->bv(1)}) & get_upper_digit: BYTE +-> 0..15 & dom(get_upper_digit) = BYTE & get_upper_digit = %by.(by: BYTE | 8*by(8)+4*by(7)+2*by(6)+by(5)) & get_lower_digit: BYTE +-> 0..15 & dom(get_lower_digit) = BYTE & get_lower_digit = %by.(by: BYTE | 8*by(4)+4*by(3)+2*by(2)+by(1)) & BV16_INDX = 1..16 & PHYS_BV16_INDEX = 0..15 & BV16 = BV16_INDX --> BIT & !b1.(b1: BV16 => size(b1) = 16 & b1: seq(BIT) & not(b1 = {})) & complement16 = %bt.(bt: BV16 | %idx.(idx: 1..16 | bit_not(bt(idx)))) & bv16_byte = %bv.(bv: BV16 | {8|->bv(16)}\/{7|->bv(15)}\/{6|->bv(14)}\/{5|->bv(13)}\/{4|->bv(12)}\/{3|->bv(11)}\/{2|->bv(10)}\/{1|->bv(9)},{8|->bv(8)}\/{7|->bv(7)}\/{6|->bv(6)}\/{5|->bv(5)}\/{4|->bv(4)}\/{3|->bv(3)}\/{2|->bv(2)}\/{1|->bv(1)}) & byte_bv16 = %(bv1,bv2).(bv1: BYTE & bv2: BYTE | {16|->bv1(8)}\/{15|->bv1(7)}\/{14|->bv1(6)}\/{13|->bv1(5)}\/{12|->bv1(4)}\/{11|->bv1(3)}\/{10|->bv1(2)}\/{9|->bv1(1)}\/{8|->bv2(8)}\/{7|->bv2(7)}\/{6|->bv2(6)}\/{5|->bv2(5)}\/{4|->bv2(4)}\/{3|->bv2(3)}\/{2|->bv2(2)}\/{1|->bv2(1)}) & UCHAR_MAX = 255 & UCHAR_MIN = 0 & UCHAR = UCHAR_MIN..UCHAR_MAX & byte_uchar = %v0.(v0: BYTE | 128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) & uchar_byte = %v0.(v0: UCHAR | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128]) & SCHAR_MAX = 127 & SCHAR_MIN = -128 & SCHAR = SCHAR_MIN..SCHAR_MAX & byte_schar = %v0.(v0: BYTE | (-128)*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) & schar_byte = %v0.(v0: SCHAR & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128])\/%v0.(v0: SCHAR & not(0<=v0) | [(v0+256) mod 2/1,(v0+256) mod 4/2,(v0+256) mod 8/4,(v0+256) mod 16/8,(v0+256) mod 32/16,(v0+256) mod 64/32,(v0+256) mod 128/64,(v0+256) mod 256/128]) & uchar_schar = %v1.(v1: UCHAR & v1<=SCHAR_MAX | v1)\/%v1.(v1: UCHAR & not(v1<=SCHAR_MAX) | v1-256) & schar_uchar = %v1.(v1: 0..127 | v1)\/%v1.(v1: -128.. -1 | v1+256) & SSHORT_MIN = -32768 & SSHORT_MAX = 32767 & SSHORT = SSHORT_MIN..SSHORT_MAX & bv16_sshort = %v0.(v0: BV16 | (-32768)*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+v0(1)) & sshort_bv16 = %v0.(v0: SSHORT & 0<=v0 | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768])\/%v0.(v0: SSHORT & not(0<=v0) | [(v0+USHORT_MAX+1) mod 2/1,(v0+USHORT_MAX+1) mod 4/2,(v0+USHORT_MAX+1) mod 8/4,(v0+USHORT_MAX+1) mod 16/8,(v0+USHORT_MAX+1) mod 32/16,(v0+USHORT_MAX+1) mod 64/32,(v0+USHORT_MAX+1) mod 128/64,(v0+USHORT_MAX+1) mod 256/128,(v0+USHORT_MAX+1) mod 512/256,(v0+USHORT_MAX+1) mod 1024/512,(v0+USHORT_MAX+1) mod 2048/1024,(v0+USHORT_MAX+1) mod 4096/2048,(v0+USHORT_MAX+1) mod 8192/4096,(v0+USHORT_MAX+1) mod 16384/8192,(v0+USHORT_MAX+1) mod 32768/16384,(v0+USHORT_MAX+1) mod 65536/32768]) & ushort_sshort = %v1.(v1: USHORT & v1<=SSHORT_MAX | v1)\/%v1.(v1: USHORT & not(v1<=SSHORT_MAX) | v1-USHORT_MAX-1) & sshort_ushort = %v1.(v1: SSHORT & 0<=v1 | v1)\/%v1.(v1: SSHORT & not(0<=v1) | v1+USHORT_MAX+1) & schar_sshort = %(w1,w2).(w1: SCHAR & w2: SCHAR | bv16_sshort(byte_bv16(schar_byte(w1),schar_byte(w2)))) & USHORT_MAX = 65535 & USHORT_MIN = 0 & USHORT = USHORT_MIN..USHORT_MAX & bv16_ushort = %v0.(v0: BV16 | 32768*v0(16)+16384*v0(15)+8192*v0(14)+4096*v0(13)+2048*v0(12)+1024*v0(11)+512*v0(10)+256*v0(9)+128*v0(8)+64*v0(7)+32*v0(6)+16*v0(5)+8*v0(4)+4*v0(3)+2*v0(2)+1*v0(1)) & ushort_bv16 = %v0.(v0: USHORT | [v0 mod 2/1,v0 mod 4/2,v0 mod 8/4,v0 mod 16/8,v0 mod 32/16,v0 mod 64/32,v0 mod 128/64,v0 mod 256/128,v0 mod 512/256,v0 mod 1024/512,v0 mod 2048/1024,v0 mod 4096/2048,v0 mod 8192/4096,v0 mod 16384/8192,v0 mod 32768/16384,v0 mod 65536/32768]) & uchar_ushort = %(w1,w2).(w1: UCHAR & w2: UCHAR | bv16_ushort(byte_bv16(uchar_byte(w1),uchar_byte(w2)))));
("`Included,imported and extended machines properties'" & PROGRAM_R_ADR = USHORT & DATA_R_ADR = USHORT & STACK_R_ADR = USHORT);
("`Component invariant'" & rgs8: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8) = (1..16)*{id_reg_8} & pc: USHORT & sp: BV16 & ix: BV16 & iy: BV16 & i_: BYTE & r_: BYTE & iff1: BIT & iff2: BIT & im: BIT*BIT & io_ports: BYTE +-> BYTE & dom(io_ports) = BYTE & btrue & btrue);
("`Seen and used machines invariants'" & btrue);
("`Included,imported and extended machines invariants'" & mem: BV16 +-> BYTE & dom(mem) = BV16);
("`Component assertions'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(mem): POW(BYTE) & dom(mem) = BV16 & ran(rgs8): POW(BYTE) & dom(rgs8) = (1..16)*{id_reg_8} & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE & dec(rgs8(5|->id_reg_8)): BYTE);
("`Seen and used machines assertions'" & is_zero16USHORT: USHORT +-> BIT & dom(is_zero16USHORT) = USHORT & is_negative: BYTE +-> BIT & dom(is_negative) = BYTE & half8UCHAR: UCHAR +-> UCHAR & dom(half8UCHAR) = UCHAR & inc: BYTE +-> BYTE & dom(inc) = BYTE & dec: BYTE +-> BYTE & dom(dec) = BYTE & simple_add8UCHAR: UCHAR*UCHAR +-> UCHAR & dom(simple_add8UCHAR) = UCHAR*UCHAR & add16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(add16USHORT) = BIT*USHORT*USHORT & substract8UCHAR: BIT*UCHAR*UCHAR +-> UCHAR*BIT*BIT*BIT*BIT & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & add_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & sub16USHORT: BIT*USHORT*USHORT +-> USHORT & dom(sub16USHORT) = BIT*USHORT*USHORT & sub_carryUSHORT: BIT*USHORT*USHORT +-> BIT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & inc_BV16: BV16 +-> BV16 & dom(inc_BV16) = BV16 & dec_BV16: BV16 +-> BV16 & dom(dec_BV16) = BV16 & update_refresh_reg: BYTE +-> BYTE & dom(update_refresh_reg) = BYTE & instruction_next: USHORT +-> USHORT & dom(instruction_next) = USHORT & instruction_jump: USHORT*(-126..129) +-> USHORT & dom(instruction_jump) = USHORT*(-126..129) & dom(is_zero16USHORT) = USHORT & ran(is_zero16USHORT) = BIT & dom(is_negative) = BYTE & ran(is_negative) = BIT & dom(half8UCHAR) = UCHAR & ran(half8UCHAR): POW(UCHAR) & dom(inc) = BYTE & ran(inc) = BYTE & dom(dec) = BYTE & ran(dec) = BYTE & dom(simple_add8UCHAR) = UCHAR*UCHAR & ran(simple_add8UCHAR) = UCHAR & dom(add8UCHAR) = BIT*UCHAR*UCHAR & ran(add8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(substract8UCHAR) = BIT*UCHAR*UCHAR & ran(substract8UCHAR): POW(UCHAR*BIT*BIT*BIT*BIT) & dom(add16USHORT) = BIT*USHORT*USHORT & ran(add16USHORT) = USHORT & dom(add_carryUSHORT) = BIT*USHORT*USHORT & ran(add_carryUSHORT) = BIT & dom(sub16USHORT) = BIT*USHORT*USHORT & ran(sub16USHORT) = USHORT & dom(sub_carryUSHORT) = BIT*USHORT*USHORT & ran(sub_carryUSHORT) = BIT & dom(inc_BV16) = BV16 & ran(inc_BV16) = BV16 & dom(dec_BV16) = BV16 & ran(dec_BV16) = BV16 & dom(update_refresh_reg) = BYTE & ran(update_refresh_reg) = BYTE & dom(instruction_next) = USHORT & ran(instruction_next) = USHORT & dom(instruction_jump) = USHORT*(-126..129) & ran(instruction_jump) = USHORT & 0 = schar_sshort(0,0) & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & byte_uchar: BYTE +-> UCHAR & byte_uchar~: UCHAR +-> BYTE & dom(byte_uchar) = BYTE & ran(byte_uchar) = UCHAR & uchar_byte: UCHAR +-> BYTE & uchar_byte~: BYTE +-> UCHAR & dom(uchar_byte) = UCHAR & ran(uchar_byte) = BYTE & byte_uchar = uchar_byte~ & schar_uchar: SCHAR +-> UCHAR & schar_uchar~: UCHAR +-> SCHAR & dom(schar_uchar) = SCHAR & ran(schar_uchar) = UCHAR & uchar_schar: UCHAR +-> SCHAR & uchar_schar~: SCHAR +-> UCHAR & dom(uchar_schar) = UCHAR & ran(uchar_schar) = SCHAR & schar_uchar = uchar_schar~ & byte_schar: BYTE +-> SCHAR & byte_schar~: SCHAR +-> BYTE & dom(byte_schar) = BYTE & ran(byte_schar) = SCHAR & schar_byte: SCHAR +-> BYTE & schar_byte~: BYTE +-> SCHAR & dom(schar_byte) = SCHAR & ran(schar_byte) = BYTE & byte_schar = schar_byte~ & bv16_byte: BV16 +-> BYTE*BYTE & bv16_byte~: BYTE*BYTE +-> BV16 & dom(bv16_byte) = BV16 & ran(bv16_byte) = BYTE*BYTE & byte_bv16: BYTE*BYTE +-> BV16 & byte_bv16~: BV16 +-> BYTE*BYTE & dom(byte_bv16) = BYTE*BYTE & ran(byte_bv16) = BV16 & bv16_byte = byte_bv16~ & bv16_ushort: BV16 +-> USHORT & bv16_ushort~: USHORT +-> BV16 & dom(bv16_ushort) = BV16 & ran(bv16_ushort) = USHORT & ushort_bv16: USHORT +-> BV16 & ushort_bv16~: BV16 +-> USHORT & dom(ushort_bv16) = USHORT & ran(ushort_bv16) = BV16 & bv16_ushort = ushort_bv16~ & uchar_ushort: UCHAR*UCHAR +-> USHORT & uchar_ushort~: USHORT +-> UCHAR*UCHAR & dom(uchar_ushort) = UCHAR*UCHAR & ran(uchar_ushort) = USHORT & bv16_sshort: BV16 +-> SSHORT & bv16_sshort~: SSHORT +-> BV16 & dom(bv16_sshort) = BV16 & ran(bv16_sshort) = SSHORT & sshort_bv16: SSHORT +-> BV16 & sshort_bv16~: BV16 +-> SSHORT & dom(sshort_bv16) = SSHORT & ran(sshort_bv16) = BV16 & bv16_sshort = sshort_bv16~ & schar_sshort: SCHAR*SCHAR +-> SSHORT & schar_sshort~: SSHORT +-> SCHAR*SCHAR & dom(schar_sshort) = SCHAR*SCHAR & ran(schar_sshort) = SSHORT & sshort_ushort: SSHORT +-> USHORT & sshort_ushort~: USHORT +-> SSHORT & dom(sshort_ushort) = SSHORT & ran(sshort_ushort) = USHORT & ushort_sshort: USHORT +-> SSHORT & ushort_sshort~: SSHORT +-> USHORT & dom(ushort_sshort) = USHORT & ran(ushort_sshort) = SSHORT & sshort_ushort = ushort_sshort~ & !bb.(bb: BIT => bit_not(bb) = 1-bb) & dom(bit_and) = BIT*BIT & ran(bit_not) = BIT & bit_not(0) = 1 & bit_not(1) = 0 & !bb.(bb: BIT => bit_not(bit_not(bb)) = bb) & dom(bit_and) = BIT*BIT & ran(bit_and) = BIT & bit_and(0,0) = 0 & bit_and(0,1) = 0 & bit_and(1,0) = 0 & bit_and(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_and(b1,b2) = bit_and(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 1 => bit_and(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_and(b1,b2) = 0 => bit_and(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_and(b1,bit_and(b2,b3)) = bit_and(bit_and(b1,b2),b3)) & !b1.(b1: BIT => bit_and(b1,1) = b1) & !b1.(b1: BIT => bit_and(b1,0) = 0) & dom(bit_or) = BIT*BIT & ran(bit_or) = BIT & bit_or(0,0) = 0 & bit_or(0,1) = 1 & bit_or(1,0) = 1 & bit_or(1,1) = 1 & !(b1,b2).(b1: BIT & b2: BIT => bit_or(b1,b2) = bit_or(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 1 => bit_or(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,b2) = 0 => bit_or(b2,b1) = 0) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 1 => b1 = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_or(b1,0) = 0 => b1 = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_or(b1,bit_or(b2,b3)) = bit_or(bit_or(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = 1) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_or(b1,b2) = 1 => bit_or(b1,bit_or(b2,b3)) = bit_or(1,b3)) & !b1.(b1: BIT => bit_or(b1,1) = 1) & !b1.(b1: BIT => bit_or(b1,0) = b1) & !b1.(b1: BIT => bit_or(1,b1) = 1) & !b1.(b1: BIT => bit_or(0,b1) = b1) & dom(bit_xor) = BIT*BIT & ran(bit_xor) = BIT & bit_xor(0,0) = 0 & bit_xor(0,1) = 1 & bit_xor(1,0) = 1 & bit_xor(1,1) = 0 & !(b1,b2).(b1: BIT & b2: BIT => bit_xor(b1,b2) = bit_xor(b2,b1)) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 1 => bit_xor(b2,b1) = 1) & !(b1,b2).(b1: BIT & b2: BIT & bit_xor(b1,b2) = 0 => bit_xor(b2,b1) = 0) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(bit_xor(b1,b2),b3)) & !(b1,b2,b3).(b1: BIT & b2: BIT & b3: BIT & bit_xor(b1,b2) = 1 => bit_xor(b1,bit_xor(b2,b3)) = bit_xor(1,b3)) & !bb.(bb: BIT => bit_xor(bb,bb) = 0) & dom(bool_bit) = BOOL & ran(bit_xor) = BIT & bool_bit(TRUE) = 1 & bool_bit(FALSE) = 0 & !bb.(bb: BIT => bb = 0 or bb = 1) & !bb.(bb: BIT & not(bb = 0) => bb = 1) & !bb.(bb: BIT & not(bb = 1) => bb = 0) & card(BYTE) = 256 & is_zero: BYTE +-> BIT & dom(is_zero) = BYTE & parity_even: BYTE +-> BIT & dom(parity_even) = BYTE & bv8_and: BYTE*BYTE +-> BYTE & dom(bv8_and) = BYTE*BYTE & bv8_or: BYTE*BYTE +-> BYTE & dom(bv8_or) = BYTE*BYTE & bv8_xor: BYTE*BYTE +-> BYTE & dom(bv8_xor) = BYTE*BYTE & complement: BYTE +-> BYTE & dom(complement) = BYTE & swap: BYTE +-> BYTE & dom(swap) = BYTE & rotateleft: BYTE +-> BYTE & dom(rotateleft) = BYTE & rotateright: BYTE +-> BYTE & dom(rotateright) = BYTE & !bt.(bt: BYTE => size(bt) = 8) & 8: INTEGER & btrue & dom(is_zero) = BYTE & ran(is_zero): POW(BIT) & dom(parity_even) = BYTE & ran(parity_even): POW(BIT) & bv8_and: BYTE*BYTE +-> BYTE & dom(bv8_and) = BYTE*BYTE & dom(complement) = BYTE & ran(complement): POW(BYTE) & dom(swap) = BYTE & ran(swap): POW(BYTE) & dom(rotateleft) = BYTE & ran(rotateleft): POW(BYTE) & dom(rotateright) = BYTE & ran(rotateright): POW(BYTE) & dom(get_upper_digit) = BYTE & ran(get_upper_digit): POW(0..15) & dom(get_lower_digit) = BYTE & ran(get_lower_digit): POW(0..15) & [1,1,1,1,1,1,1,1]: BYTE & [0,0,0,0,0,0,0,0]: BYTE & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & card(BV16) = 65536 & complement16: BV16 +-> BV16 & dom(complement16) = BV16 & byte_bv16 = bv16_byte~ & [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]: BV16 & [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]: BV16 & card(byte_uchar) = 256 & card(uchar_byte) = 256 & UCHAR_MAX: INTEGER & UCHAR_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & card(byte_schar) = 256 & card(schar_byte) = 256 & SCHAR_MAX: INTEGER & SCHAR_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & card(bv16_sshort) = 65536 & card(sshort_bv16) = 65536 & SSHORT_MIN: SSHORT & SSHORT_MAX: SSHORT & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & card(bv16_ushort) = 65536 & card(ushort_bv16) = 65536 & USHORT_MAX: INTEGER & USHORT_MIN: INTEGER & 1 = 2**0 & 2 = 2**1 & 4 = 2**2 & 8 = 2**3 & 16 = 2**4 & 32 = 2**5 & 64 = 2**6 & 128 = 2**7 & 256 = 2**8 & 512 = 2**9 & 1024 = 2**10 & 2048 = 2**11 & 4096 = 2**12 & 8192 = 2**13 & 16384 = 2**14 & 32768 = 2**15 & 65536 = 2**16 & 2**0 = 1 & 2**1 = 2 & 2**2 = 4 & 2**3 = 8 & 2**4 = 16 & 2**5 = 32 & 2**6 = 64 & 2**7 = 128 & (-2)**7 = -128 & 2**8 = 256 & 2**9 = 512 & 2**10 = 1024 & 2**11 = 2048 & 2**12 = 4096 & 2**13 = 8192 & 2**14 = 16384 & 2**15 = 32768 & 2**16 = 65536);
("`Included,imported and extended machines assertions'" & ran(mem): POW(BYTE) & dom(mem) = BV16 & !(address,value).(address: BV16 & value: BYTE => mem<+{address|->value}: BV16 +-> BYTE & dom(mem<+{address|->value}) = BV16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0);
(rgs8_(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1);
(rgs8_(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2);
(rgs8_(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3);
(rgs8_(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4);
(rgs8_(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5);
(rgs8_(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6);
(rgs8_(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7);
(rgs8_(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(5|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(6|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(rgs8_(5|->id_reg_8),rgs8_(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 1|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(9|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(10|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(rgs8_(9|->id_reg_8),rgs8_(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 2|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(13|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(14|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(rgs8_(13|->id_reg_8),rgs8_(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 3|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(1|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(2|->id_reg_8: dom(rgs8_));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(rgs8_(1|->id_reg_8),rgs8_(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & (1..16)*{id_reg_8}: FIN(NATURAL*{id_reg_8}) & not((1..16)*{id_reg_8} = {}) & (1..5)*{id_reg_16}: FIN(NATURAL*{id_reg_16}) & not((1..5)*{id_reg_16} = {}) & REG16_TO_REG8: (1..5)*{id_reg_16} +-> (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) & REG16_TO_REG8 = %idf.(idf: (1..5)*{id_reg_16} & idf = 1|->id_reg_16 | 5|->id_reg_8,6|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 2|->id_reg_16 | 9|->id_reg_8,10|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 3|->id_reg_16 | 13|->id_reg_8,14|->id_reg_8)\/%idf.(idf: (1..5)*{id_reg_16} & idf = 5|->id_reg_16 | 1|->id_reg_8,2|->id_reg_8) & REG8_TO_REG16: (1..16)*{id_reg_8}*((1..16)*{id_reg_8}) +-> (1..5)*{id_reg_16} & REG8_TO_REG16 = %(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 5|->id_reg_8 & idf2 = 6|->id_reg_8 | 1|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 9|->id_reg_8 & idf2 = 10|->id_reg_8 | 2|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 13|->id_reg_8 & idf2 = 14|->id_reg_8 | 3|->id_reg_16)\/%(idf1,idf2).(idf1: (1..16)*{id_reg_8} & idf2: (1..16)*{id_reg_8} & idf1 = 1|->id_reg_8 & idf2 = 2|->id_reg_8 | 5|->id_reg_16) & update_flag_reg = %(s7$0,z6$0,h4$0,pv2$0,n_add_sub$0,c0$0).(s7$0: BIT & z6$0: BIT & h4$0: BIT & pv2$0: BIT & n_add_sub$0: BIT & c0$0: BIT | 2|->id_reg_8|->[c0$0,n_add_sub$0,pv2$0,1,h4$0,1,z6$0,s7$0]) & cc_get = %(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 0 | 1-bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 1 | bv8get(rgs8_(2|->id_reg_8),6))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 2 | 1-bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 3 | bv8get(rgs8_(2|->id_reg_8),0))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 4 | 1-bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 5 | bv8get(rgs8_(2|->id_reg_8),2))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 6 | 1-bv8get(rgs8_(2|->id_reg_8),7))\/%(rgs8_,ind).(rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & ind = 7 | bv8get(rgs8_(2|->id_reg_8),7)) & sp_: BV16 & rgs8_: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8_) = (1..16)*{id_reg_8} & r1 = 5|->id_reg_16);
(byte_bv16: dom(byte_bv16) +-> ran(byte_bv16));
("`Local hypotheses'" & btrue);
(REG16_TO_REG8: FIN(REG16_TO_REG8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5);
(update_flag_reg: FIN(update_flag_reg));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT);
(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE);
(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE);
(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE);
(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(0: dom(schar_byte));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE);
(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)))): dom(mem));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT);
(b1,b2,b3,b4,b5,b6: dom(update_flag_reg));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}));
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}));
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}));
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(9|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(10|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(0,bv16_ushort(sp),1: dom(add16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16);
(add16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16);
(0,bv16_ushort(sp),2: dom(add16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16);
(add16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT);
(rgs8(2|->id_reg_8),5: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT);
(rgs8(2|->id_reg_8),4: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT);
(rgs8(2|->id_reg_8),3: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT);
(rgs8(2|->id_reg_8),1: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT);
(6|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT);
(rgs8(6|->id_reg_8): dom(io_ports));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & card(REG16_TO_REG8) = 5 & card(update_flag_reg) = 64 & get_bv_reg16: BV16*((1..16)*{id_reg_8} --> BYTE)*((1..5)*{id_reg_16}) +-> BV16 & cc_get: ((1..16)*{id_reg_8} --> BYTE)*(0..8) +-> BIT & ran(rgs8): POW(BYTE) & instruction_next(pc): USHORT & mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))): BYTE & mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))): BYTE & mem(byte_bv16(schar_byte(0),mem(byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8))))): BYTE & mem(sp): BYTE & mem(ix): BYTE & mem(iy): BYTE & update_refresh_reg(r_): BYTE & dom(update_flag_reg) = BIT*BIT*BIT*BIT*BIT*BIT & ran(update_flag_reg): POW({2|->id_reg_8}*BYTE) & !(b1,b2,b3,b4,b5,b6).(b1: BIT & b2: BIT & b3: BIT & b4: BIT & b5: BIT & b6: BIT => update_flag_reg(b1,b2,b3,b4,b5,b6): {2|->id_reg_8}*BYTE) & !xx.(xx: (1..16)*{id_reg_8} +-> BYTE & dom(xx) = (1..16)*{id_reg_8} => rgs8<+xx: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+xx) = (1..16)*{id_reg_8}) & !(xx,xxr).(xx: (1..16)*{id_reg_8} & xxr: BYTE => rgs8<+{xx|->xxr}: (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+{xx|->xxr}) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & not(xx = yy) => rgs8<+({xx|->xxr}\/{yy|->yyr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & not(xx = yy) & not(xx = zz) & not(yy = zz) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(yy = zz) & not(yy = vv) & not(zz = vv) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(zz = vv) & not(zz = ww) & not(vv = ww) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(vv = ww) & not(vv = aa) & not(ww = aa) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar})) = (1..16)*{id_reg_8}) & !(xx,xxr,yy,yyr,zz,zzr,vv,vvr,ww,wwr,aa,aar,bb,bbr).(xx: (1..16)*{id_reg_8} & xxr: BYTE & yy: (1..16)*{id_reg_8} & yyr: BYTE & zz: (1..16)*{id_reg_8} & zzr: BYTE & vv: (1..16)*{id_reg_8} & vvr: BYTE & ww: (1..16)*{id_reg_8} & wwr: BYTE & aa: (1..16)*{id_reg_8} & aar: BYTE & bb: (1..16)*{id_reg_8} & bbr: BYTE & not(xx = yy) & not(xx = zz) & not(xx = vv) & not(xx = ww) & not(xx = aa) & not(xx = bb) & not(yy = zz) & not(yy = vv) & not(yy = ww) & not(yy = aa) & not(yy = bb) & not(zz = vv) & not(zz = ww) & not(zz = aa) & not(zz = bb) & not(vv = ww) & not(vv = aa) & not(vv = bb) & not(ww = aa) & not(ww = bb) & not(aa = bb) => rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr}): (1..16)*{id_reg_8} +-> BYTE & dom(rgs8<+({xx|->xxr}\/{yy|->yyr}\/{zz|->zzr}\/{vv|->vvr}\/{ww|->wwr}\/{aa|->aar}\/{bb|->bbr})) = (1..16)*{id_reg_8}) & byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8)): BV16 & byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)): BV16 & byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8)): BV16 & byte_bv16(rgs8(1|->id_reg_8),rgs8(2|->id_reg_8)): BV16 & dec_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(5|->id_reg_8),rgs8(6|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(9|->id_reg_8),rgs8(10|->id_reg_8))): BV16 & inc_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & dec_BV16(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(add16USHORT(0,bv16_ushort(sp),2)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)): BV16 & ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2)): BV16 & bv8get(rgs8(2|->id_reg_8),7): BIT & bv8get(rgs8(2|->id_reg_8),6): BIT & bv8get(rgs8(2|->id_reg_8),5): BIT & bv8get(rgs8(2|->id_reg_8),4): BIT & bv8get(rgs8(2|->id_reg_8),3): BIT & bv8get(rgs8(2|->id_reg_8),2): BIT & bv8get(rgs8(2|->id_reg_8),1): BIT & bv8get(rgs8(2|->id_reg_8),0): BIT & io_ports(rgs8(6|->id_reg_8)): BYTE);
(rgs8(5|->id_reg_8): dom(dec));
("`RLCA preconditions in previous components'" & btrue);
("`RLCA preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bv8get(rgs8(2|->id_reg_8),6),0,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(1|->id_reg_8),7): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8): dom(rotateleft));
("`RLA preconditions in previous components'" & btrue);
("`RLA preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bv8get(rgs8(2|->id_reg_8),6),0,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(1|->id_reg_8),7): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8): dom(rotateleft));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`RRCA preconditions in previous components'" & btrue);
("`RRCA preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bv8get(rgs8(2|->id_reg_8),6),0,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(1|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8): dom(rotateright));
("`RRA preconditions in previous components'" & btrue);
("`RRA preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bv8get(rgs8(2|->id_reg_8),6),0,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(1|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & btrue);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(1|->id_reg_8): dom(rotateright));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`RLC_r preconditions in previous components'" & btrue);
("`RLC_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & res: BYTE);
(rgs8(rr): dom(rotateleft));
("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr)));
(rgs8(rr),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr)));
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(rgs8(rr),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr)));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`RLC_9HL0 preconditions in previous components'" & btrue);
("`RLC_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`RLC_9IX_d0 preconditions in previous components'" & btrue);
("`RLC_9IX_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): dom(rotateleft));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))));
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))));
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & desloc: SCHAR);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(bv16_ushort));
("`RLC_9IY_d0 preconditions in previous components'" & btrue);
("`RLC_9IY_d0 preconditions in this component'" & desloc: SCHAR & bv16_ushort(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): dom(rotateleft));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))));
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))));
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & desloc: SCHAR);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(bv16_ushort));
("`RL_r preconditions in previous components'" & btrue);
("`RL_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & res: BYTE);
(rgs8(rr): dom(rotateleft));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(rr),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(rgs8(rr),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`RL_9HL preconditions in previous components'" & btrue);
("`RL_9HL preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{0|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`RL_9IX_d0 preconditions in previous components'" & btrue);
("`RL_9IX_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): dom(rotateleft));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`RL_9IY_d0 preconditions in previous components'" & btrue);
("`RL_9IY_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): dom(rotateleft));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateleft(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`RRC_r preconditions in previous components'" & btrue);
("`RRC_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & res: BYTE);
(rgs8(rr): dom(rotateright));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr)));
(rgs8(rr),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr)));
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(rgs8(rr),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr)));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`RRC_9HL0 preconditions in previous components'" & btrue);
("`RRC_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`RRC_9IX_d0 preconditions in previous components'" & btrue);
("`RRC_9IX_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))));
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))));
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`RRC_9IY_d0 preconditions in previous components'" & btrue);
("`RRC_9IY_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))));
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))));
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`RR_r preconditions in previous components'" & btrue);
("`RR_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & res: BYTE);
(rgs8(rr): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(rr),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(rgs8(rr),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`RR_9HL preconditions in previous components'" & btrue);
("`RR_9HL preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): STACK_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`RR_9IX_d0 preconditions in previous components'" & btrue);
("`RR_9IX_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`RR_9IY_d0 preconditions in previous components'" & btrue);
("`RR_9IY_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{1|->bv8get(rgs8(2|->id_reg_8),0)} & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`SLA_r preconditions in previous components'" & btrue);
("`SLA_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & res: BYTE);
(rgs8(rr): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(rr),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(rgs8(rr),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(rgs8(rr))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`SLA_9HL0 preconditions in previous components'" & btrue);
("`SLA_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{1|->bv8get(rgs8(2|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`SRA_9HL0 preconditions in previous components'" & btrue);
("`SRA_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE);
(7: dom(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
("`Local hypotheses'" & res: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): dom(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))) +-> ran(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))))<+{8|->mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))(7)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`SRA_9IX_d0 preconditions in previous components'" & btrue);
("`SRA_9IX_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)});
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)});
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`SRA_9IY_d0 preconditions in previous components'" & btrue);
("`SRA_9IY_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)});
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)});
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(is_negative(res),is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)))<+{7|->bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),7)} & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`SRL_r preconditions in previous components'" & btrue);
("`SRL_r preconditions in this component'" & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & res: BYTE);
(rgs8(rr): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(rotateright(rgs8(rr)),7: dom(bitclear));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(rgs8(rr)),7));
(rgs8(rr),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(rgs8(rr)),7));
(0,is_zero(res),0,parity_even(res),0,bv8get(rgs8(rr),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(rgs8(rr)),7));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`SRL_9HL0 preconditions in previous components'" & btrue);
("`SRL_9HL0 preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE);
(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7: dom(bitclear));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(0,is_zero(res),0,parity_even(res),0,bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8)))),7));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`SRL_9IX_d0 preconditions in previous components'" & btrue);
("`SRL_9IX_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7: dom(bitclear));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7));
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7));
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0,is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`SRL_9IY_d0 preconditions in previous components'" & btrue);
("`SRL_9IY_d0 preconditions in this component'" & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & res: BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & res: BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)): dom(rotateright));
("`Local hypotheses'" & res: BYTE);
(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7: dom(bitclear));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7));
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7));
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0,is_zero(res),0,parity_even(res),0,bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & res: BYTE & res = bitclear(rotateright(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536))),7) & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`RLD preconditions in previous components'" & btrue);
("`RLD preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),1: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),3: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(is_negative(acc),is_zero(acc),0,parity_even(acc),0,bv8get(rgs8(2|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{7|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{6|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{5|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}\/{4|->bv8get(rgs8(1|->id_reg_8),3)}\/{3|->bv8get(rgs8(1|->id_reg_8),2)}\/{2|->bv8get(rgs8(1|->id_reg_8),1)}\/{1|->bv8get(rgs8(1|->id_reg_8),0)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)}));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`RRD preconditions in previous components'" & btrue);
("`RRD preconditions in this component'" & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),1: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE);
(rgs8(1|->id_reg_8),3: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(1|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)});
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(is_negative(acc),is_zero(acc),0,parity_even(acc),0,bv8get(rgs8(2|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BYTE & acc: BYTE & res = {8|->bv8get(rgs8(1|->id_reg_8),3)}\/{7|->bv8get(rgs8(1|->id_reg_8),2)}\/{6|->bv8get(rgs8(1|->id_reg_8),1)}\/{5|->bv8get(rgs8(1|->id_reg_8),0)}\/{4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),7)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),6)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),5)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),4)} & acc = rgs8(1|->id_reg_8)<+({4|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),3)}\/{3|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),2)}\/{2|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),1)}\/{1|->bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),0)}));
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`BIT_b_rr preconditions in previous components'" & btrue);
("`BIT_b_rr preconditions in this component'" & bb: 0..7 & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(rgs8(rr),bb: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(rr),bb): dom(bit_not));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bit_not(bv8get(rgs8(rr),bb)),1,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(2|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`BIT_b_9HL0 preconditions in previous components'" & btrue);
("`BIT_b_9HL0 preconditions in this component'" & bb: 0..7);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): dom(bit_not));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bit_not(bv8get(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb)),1,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(2|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`BIT_b_9IX_d0 preconditions in previous components'" & btrue);
("`BIT_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & btrue);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & btrue);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): dom(bit_not));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bit_not(bv8get(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb)),1,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(2|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`BIT_b_9IY_d0 preconditions in previous components'" & btrue);
("`BIT_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & btrue);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & btrue);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): dom(mem));
("`Local hypotheses'" & btrue);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): dom(bit_not));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(bv8get(rgs8(2|->id_reg_8),7),bit_not(bv8get(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb)),1,bv8get(rgs8(2|->id_reg_8),2),0,bv8get(rgs8(2|->id_reg_8),0): dom(update_flag_reg));
("`Local hypotheses'" & btrue);
(update_flag_reg: dom(update_flag_reg) +-> ran(update_flag_reg));
("`SET_b_r preconditions in previous components'" & btrue);
("`SET_b_r preconditions in this component'" & bb: 0..7 & rr: (1..16)*{id_reg_8});
("`Local hypotheses'" & btrue);
(rgs8(rr),bb: dom(bitset));
("`SET_b_9HL0 preconditions in previous components'" & btrue);
("`SET_b_9HL0 preconditions in this component'" & bb: 0..7 & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb: dom(bitset));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & bitset(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb: dom(bitset));
("`Local hypotheses'" & bb: 0..7);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bb: 0..7);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bb: 0..7);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`SET_b_9IX_d0 preconditions in previous components'" & btrue);
("`SET_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & btrue);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & btrue);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb: dom(bitset));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb: dom(bitset));
("`Local hypotheses'" & bb: 0..7 & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`SET_b_9IY_d0 preconditions in previous components'" & btrue);
("`SET_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & btrue);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & btrue);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb: dom(bitset));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitset(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb: dom(bitset));
("`Local hypotheses'" & bb: 0..7 & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`RES_b_r preconditions in previous components'" & btrue);
("`RES_b_r preconditions in this component'" & bb: 0..7 & rr: (1..16)*{id_reg_8} & not(rr = 2|->id_reg_8));
("`Local hypotheses'" & btrue);
(rgs8(rr),bb: dom(bitclear));
("`RES_b_9HL0 preconditions in previous components'" & btrue);
("`RES_b_9HL0 preconditions in this component'" & bb: 0..7 & bv16_ushort(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))): DATA_R_ADR);
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb: dom(bitclear));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`Local hypotheses'" & bitclear(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb): BYTE);
(mem(byte_bv16(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8))),bb: dom(bitclear));
("`Local hypotheses'" & bb: 0..7);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bb: 0..7);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & bb: 0..7);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`RES_b_9IX_d0 preconditions in previous components'" & btrue);
("`RES_b_9IX_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & (bv16_ushort(ix)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & btrue);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & btrue);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb: dom(bitclear));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(ix)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(ix)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb): BYTE);
(mem(ushort_bv16((bv16_ushort(ix)+desloc+65536) mod 65536)),bb: dom(bitclear));
("`Local hypotheses'" & bb: 0..7 & desloc: SCHAR);
(0<=bv16_ushort(ix)+desloc+65536);
("`RES_b_9IY_d0 preconditions in previous components'" & btrue);
("`RES_b_9IY_d0 preconditions in this component'" & bb: 0..7 & desloc: SCHAR & (bv16_ushort(iy)+desloc+65536) mod 65536: DATA_R_ADR);
("`Local hypotheses'" & btrue);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & btrue);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb: dom(bitclear));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
(0<=bv16_ushort(iy)+desloc+65536);
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
((bv16_ushort(iy)+desloc+65536) mod 65536: dom(ushort_bv16));
("`Local hypotheses'" & ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536): BV16 & bitclear(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb): BYTE);
(mem(ushort_bv16((bv16_ushort(iy)+desloc+65536) mod 65536)),bb: dom(bitclear));
("`Local hypotheses'" & bb: 0..7 & desloc: SCHAR);
(0<=bv16_ushort(iy)+desloc+65536);
("`JP_nn preconditions in previous components'" & btrue);
("`JP_nn preconditions in this component'" & nn: USHORT);
("`JP_cc_nn preconditions in previous components'" & btrue);
("`JP_cc_nn preconditions in this component'" & cc: 0..7 & nn: USHORT);
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),7: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),2: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & res: BIT);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & res: BIT);
(cc: dom({0|->bit_not(bv8get(rgs8(2|->id_reg_8),6))}\/{1|->bv8get(rgs8(2|->id_reg_8),6)}\/{2|->bit_not(bv8get(rgs8(2|->id_reg_8),0))}\/{3|->bv8get(rgs8(2|->id_reg_8),0)}\/{4|->bit_not(bv8get(rgs8(2|->id_reg_8),2))}\/{5|->bv8get(rgs8(2|->id_reg_8),2)}\/{6|->bit_not(bv8get(rgs8(2|->id_reg_8),7))}\/{7|->bv8get(rgs8(2|->id_reg_8),7)}));
("`Local hypotheses'" & res: BIT);
({0|->bit_not(bv8get(rgs8(2|->id_reg_8),6))}\/{1|->bv8get(rgs8(2|->id_reg_8),6)}\/{2|->bit_not(bv8get(rgs8(2|->id_reg_8),0))}\/{3|->bv8get(rgs8(2|->id_reg_8),0)}\/{4|->bit_not(bv8get(rgs8(2|->id_reg_8),2))}\/{5|->bv8get(rgs8(2|->id_reg_8),2)}\/{6|->bit_not(bv8get(rgs8(2|->id_reg_8),7))}\/{7|->bv8get(rgs8(2|->id_reg_8),7)}: dom({0|->bit_not(bv8get(rgs8(2|->id_reg_8),6))}\/{1|->bv8get(rgs8(2|->id_reg_8),6)}\/{2|->bit_not(bv8get(rgs8(2|->id_reg_8),0))}\/{3|->bv8get(rgs8(2|->id_reg_8),0)}\/{4|->bit_not(bv8get(rgs8(2|->id_reg_8),2))}\/{5|->bv8get(rgs8(2|->id_reg_8),2)}\/{6|->bit_not(bv8get(rgs8(2|->id_reg_8),7))}\/{7|->bv8get(rgs8(2|->id_reg_8),7)}) +-> ran({0|->bit_not(bv8get(rgs8(2|->id_reg_8),6))}\/{1|->bv8get(rgs8(2|->id_reg_8),6)}\/{2|->bit_not(bv8get(rgs8(2|->id_reg_8),0))}\/{3|->bv8get(rgs8(2|->id_reg_8),0)}\/{4|->bit_not(bv8get(rgs8(2|->id_reg_8),2))}\/{5|->bv8get(rgs8(2|->id_reg_8),2)}\/{6|->bit_not(bv8get(rgs8(2|->id_reg_8),7))}\/{7|->bv8get(rgs8(2|->id_reg_8),7)}));
("`JR_e preconditions in previous components'" & btrue);
("`JR_e preconditions in this component'" & ee_p: USHORT & ee_p-pc<=129 & -126<=ee_p-pc);
("`JR_C_e preconditions in previous components'" & btrue);
("`JR_C_e preconditions in this component'" & ee_p: USHORT & ee_p-pc<=129 & -126<=ee_p-pc);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`JR_NC_e preconditions in previous components'" & btrue);
("`JR_NC_e preconditions in this component'" & ee_p: USHORT & ee_p-pc<=129 & -126<=ee_p-pc);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),0: dom(bv8get));
("`JR_Z_e preconditions in previous components'" & btrue);
("`JR_Z_e preconditions in this component'" & ee_p: USHORT & ee_p-pc<=129 & -126<=ee_p-pc);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`JR_NZ_e preconditions in previous components'" & btrue);
("`JR_NZ_e preconditions in this component'" & ee_p: USHORT & ee_p-pc<=129 & -126<=ee_p-pc);
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`Local hypotheses'" & btrue);
(2|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(2|->id_reg_8),6: dom(bv8get));
("`JP_HL preconditions in previous components'" & btrue);
("`JP_HL preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(13|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(14|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(13|->id_reg_8),rgs8(14|->id_reg_8): dom(byte_bv16));
("`JP_IX preconditions in previous components'" & btrue);
("`JP_IX preconditions in this component'" & btrue);
("`JP_IY preconditions in previous components'" & btrue);
("`JP_IY preconditions in this component'" & btrue);
("`DJNZ_e preconditions in previous components'" & btrue);
("`DJNZ_e preconditions in this component'" & ee_p: USHORT & ee_p-pc<=129 & -126<=ee_p-pc);
("`Local hypotheses'" & btrue);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(5|->id_reg_8): dom(dec));
("`Local hypotheses'" & btrue);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(5|->id_reg_8): dom(dec));
("`Local hypotheses'" & btrue);
(5|->id_reg_8: dom(rgs8));
("`Local hypotheses'" & btrue);
(rgs8(5|->id_reg_8): dom(dec));
("`CALL_nn preconditions in previous components'" & btrue);
("`CALL_nn preconditions in this component'" & nn: USHORT & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
("`Local hypotheses'" & high: BYTE & low: BYTE);
(ushort_bv16(pc): dom(bv16_byte));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)));
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)));
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)));
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)));
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))));
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))));
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))));
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))));
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & not(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1)) = ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))) & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & nn: USHORT);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & nn: USHORT);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`CALL_cc_nn preconditions in previous components'" & btrue);
("`CALL_cc_nn preconditions in this component'" & cc: 0..8 & nn: USHORT & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
("`Local hypotheses'" & high: BYTE & low: BYTE);
(ushort_bv16(pc): dom(bv16_byte));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)));
(rgs8,cc: dom(cc_get));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)) & cc_get(rgs8,cc) = 1 & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->high}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->low}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & high: BYTE & low: BYTE & high,low = bv16_byte(ushort_bv16(pc)));
(rgs8,cc: dom(cc_get));
("`Local hypotheses'" & cc: 0..8 & nn: USHORT);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & cc: 0..8 & nn: USHORT);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`RET preconditions in previous components'" & btrue);
("`RET preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),1: dom(add16USHORT));
("`Local hypotheses'" & btrue);
(add16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp)): dom(bv16_ushort));
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),2: dom(add16USHORT));
("`Local hypotheses'" & btrue);
(add16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`RET_cc preconditions in previous components'" & btrue);
("`RET_cc preconditions in this component'" & cc: 0..7);
("`Local hypotheses'" & btrue);
(rgs8,cc: dom(cc_get));
("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
(0,bv16_ushort(sp),1: dom(add16USHORT));
("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
(add16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp): dom(byte_bv16));
("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
(byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp)): dom(bv16_ushort));
("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
(0,bv16_ushort(sp),2: dom(add16USHORT));
("`Local hypotheses'" & cc_get(rgs8,cc) = 1);
(add16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(rgs8,cc: dom(cc_get));
("`RETI preconditions in previous components'" & btrue);
("`RETI preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),1: dom(add16USHORT));
("`Local hypotheses'" & btrue);
(add16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp)): dom(bv16_ushort));
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),2: dom(add16USHORT));
("`Local hypotheses'" & btrue);
(add16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`RETN preconditions in previous components'" & btrue);
("`RETN preconditions in this component'" & btrue);
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),1: dom(add16USHORT));
("`Local hypotheses'" & btrue);
(add16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & btrue);
(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp): dom(byte_bv16));
("`Local hypotheses'" & btrue);
(byte_bv16(mem(ushort_bv16(add16USHORT(0,bv16_ushort(sp),1))),mem(sp)): dom(bv16_ushort));
("`Local hypotheses'" & btrue);
(0,bv16_ushort(sp),2: dom(add16USHORT));
("`Local hypotheses'" & btrue);
(add16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`RST_p preconditions in previous components'" & btrue);
("`RST_p preconditions in this component'" & pp: 0..7 & bv16_ushort(ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))): STACK_R_ADR & bv16_ushort(sp): STACK_R_ADR);
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE);
(ushort_bv16(pc): dom(bv16_byte));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
(0,bv16_ushort(sp),1: dom(sub16USHORT));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),1): dom(ushort_bv16));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pc_l: BYTE & pc_h: BYTE & bv16_byte(ushort_bv16(pc)) = pc_l|->pc_h & {ushort_bv16(sub16USHORT(0,bv16_ushort(sp),1))|->pc_h}\/{ushort_bv16(sub16USHORT(0,bv16_ushort(sp),2))|->pc_l}: BV16 +-> BYTE);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16));
("`Local hypotheses'" & pp: 0..7);
(0,bv16_ushort(sp),2: dom(sub16USHORT));
("`Local hypotheses'" & pp: 0..7);
(sub16USHORT(0,bv16_ushort(sp),2): dom(ushort_bv16))

END
&

THEORY EnumerateX IS
(id_reg_8 == {a0,f0,f_0,a_0,b0,c0,b_0,c_0,d0,e0,d_0,e_0,h0,l0,h_0,l_0});
(id_reg_16 == {BC,DE,HL,SP,AF})

END
